//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SJRAtlas.Metadata {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("metadata")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class metadata : System.Data.DataSet {
        
        private idinfoDataTable tableidinfo;
        
        private citationDataTable tablecitation;
        
        private citeinfoDataTable tableciteinfo;
        
        private descriptDataTable tabledescript;
        
        private timeperdDataTable tabletimeperd;
        
        private timeinfoDataTable tabletimeinfo;
        
        private sngdateDataTable tablesngdate;
        
        private statusDataTable tablestatus;
        
        private spdomDataTable tablespdom;
        
        private boundingDataTable tablebounding;
        
        private keywordsDataTable tablekeywords;
        
        private themeDataTable tabletheme;
        
        private distinfoDataTable tabledistinfo;
        
        private metainfoDataTable tablemetainfo;
        
        private metcDataTable tablemetc;
        
        private cntinfoDataTable tablecntinfo;
        
        private cntorgpDataTable tablecntorgp;
        
        private cntaddrDataTable tablecntaddr;
        
        private metextnsDataTable tablemetextns;
        
        private System.Data.DataRelation relationidinfo_citation;
        
        private System.Data.DataRelation relationcitation_citeinfo;
        
        private System.Data.DataRelation relationidinfo_descript;
        
        private System.Data.DataRelation relationidinfo_timeperd;
        
        private System.Data.DataRelation relationtimeperd_timeinfo;
        
        private System.Data.DataRelation relationtimeinfo_sngdate;
        
        private System.Data.DataRelation relationidinfo_status;
        
        private System.Data.DataRelation relationidinfo_spdom;
        
        private System.Data.DataRelation relationspdom_bounding;
        
        private System.Data.DataRelation relationidinfo_keywords;
        
        private System.Data.DataRelation relationkeywords_theme;
        
        private System.Data.DataRelation relationmetainfo_metc;
        
        private System.Data.DataRelation relationmetc_cntinfo;
        
        private System.Data.DataRelation relationcntinfo_cntorgp;
        
        private System.Data.DataRelation relationcntinfo_cntaddr;
        
        private System.Data.DataRelation relationmetainfo_metextns;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public metadata() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected metadata(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["idinfo"] != null)) {
                    base.Tables.Add(new idinfoDataTable(ds.Tables["idinfo"]));
                }
                if ((ds.Tables["citation"] != null)) {
                    base.Tables.Add(new citationDataTable(ds.Tables["citation"]));
                }
                if ((ds.Tables["citeinfo"] != null)) {
                    base.Tables.Add(new citeinfoDataTable(ds.Tables["citeinfo"]));
                }
                if ((ds.Tables["descript"] != null)) {
                    base.Tables.Add(new descriptDataTable(ds.Tables["descript"]));
                }
                if ((ds.Tables["timeperd"] != null)) {
                    base.Tables.Add(new timeperdDataTable(ds.Tables["timeperd"]));
                }
                if ((ds.Tables["timeinfo"] != null)) {
                    base.Tables.Add(new timeinfoDataTable(ds.Tables["timeinfo"]));
                }
                if ((ds.Tables["sngdate"] != null)) {
                    base.Tables.Add(new sngdateDataTable(ds.Tables["sngdate"]));
                }
                if ((ds.Tables["status"] != null)) {
                    base.Tables.Add(new statusDataTable(ds.Tables["status"]));
                }
                if ((ds.Tables["spdom"] != null)) {
                    base.Tables.Add(new spdomDataTable(ds.Tables["spdom"]));
                }
                if ((ds.Tables["bounding"] != null)) {
                    base.Tables.Add(new boundingDataTable(ds.Tables["bounding"]));
                }
                if ((ds.Tables["keywords"] != null)) {
                    base.Tables.Add(new keywordsDataTable(ds.Tables["keywords"]));
                }
                if ((ds.Tables["theme"] != null)) {
                    base.Tables.Add(new themeDataTable(ds.Tables["theme"]));
                }
                if ((ds.Tables["distinfo"] != null)) {
                    base.Tables.Add(new distinfoDataTable(ds.Tables["distinfo"]));
                }
                if ((ds.Tables["metainfo"] != null)) {
                    base.Tables.Add(new metainfoDataTable(ds.Tables["metainfo"]));
                }
                if ((ds.Tables["metc"] != null)) {
                    base.Tables.Add(new metcDataTable(ds.Tables["metc"]));
                }
                if ((ds.Tables["cntinfo"] != null)) {
                    base.Tables.Add(new cntinfoDataTable(ds.Tables["cntinfo"]));
                }
                if ((ds.Tables["cntorgp"] != null)) {
                    base.Tables.Add(new cntorgpDataTable(ds.Tables["cntorgp"]));
                }
                if ((ds.Tables["cntaddr"] != null)) {
                    base.Tables.Add(new cntaddrDataTable(ds.Tables["cntaddr"]));
                }
                if ((ds.Tables["metextns"] != null)) {
                    base.Tables.Add(new metextnsDataTable(ds.Tables["metextns"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public idinfoDataTable idinfo {
            get {
                return this.tableidinfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public citationDataTable citation {
            get {
                return this.tablecitation;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public citeinfoDataTable citeinfo {
            get {
                return this.tableciteinfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public descriptDataTable descript {
            get {
                return this.tabledescript;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public timeperdDataTable timeperd {
            get {
                return this.tabletimeperd;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public timeinfoDataTable timeinfo {
            get {
                return this.tabletimeinfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sngdateDataTable sngdate {
            get {
                return this.tablesngdate;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public statusDataTable status {
            get {
                return this.tablestatus;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public spdomDataTable spdom {
            get {
                return this.tablespdom;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public boundingDataTable bounding {
            get {
                return this.tablebounding;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public keywordsDataTable keywords {
            get {
                return this.tablekeywords;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public themeDataTable theme {
            get {
                return this.tabletheme;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public distinfoDataTable distinfo {
            get {
                return this.tabledistinfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public metainfoDataTable metainfo {
            get {
                return this.tablemetainfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public metcDataTable metc {
            get {
                return this.tablemetc;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public cntinfoDataTable cntinfo {
            get {
                return this.tablecntinfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public cntorgpDataTable cntorgp {
            get {
                return this.tablecntorgp;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public cntaddrDataTable cntaddr {
            get {
                return this.tablecntaddr;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public metextnsDataTable metextns {
            get {
                return this.tablemetextns;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            metadata cln = ((metadata)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["idinfo"] != null)) {
                    base.Tables.Add(new idinfoDataTable(ds.Tables["idinfo"]));
                }
                if ((ds.Tables["citation"] != null)) {
                    base.Tables.Add(new citationDataTable(ds.Tables["citation"]));
                }
                if ((ds.Tables["citeinfo"] != null)) {
                    base.Tables.Add(new citeinfoDataTable(ds.Tables["citeinfo"]));
                }
                if ((ds.Tables["descript"] != null)) {
                    base.Tables.Add(new descriptDataTable(ds.Tables["descript"]));
                }
                if ((ds.Tables["timeperd"] != null)) {
                    base.Tables.Add(new timeperdDataTable(ds.Tables["timeperd"]));
                }
                if ((ds.Tables["timeinfo"] != null)) {
                    base.Tables.Add(new timeinfoDataTable(ds.Tables["timeinfo"]));
                }
                if ((ds.Tables["sngdate"] != null)) {
                    base.Tables.Add(new sngdateDataTable(ds.Tables["sngdate"]));
                }
                if ((ds.Tables["status"] != null)) {
                    base.Tables.Add(new statusDataTable(ds.Tables["status"]));
                }
                if ((ds.Tables["spdom"] != null)) {
                    base.Tables.Add(new spdomDataTable(ds.Tables["spdom"]));
                }
                if ((ds.Tables["bounding"] != null)) {
                    base.Tables.Add(new boundingDataTable(ds.Tables["bounding"]));
                }
                if ((ds.Tables["keywords"] != null)) {
                    base.Tables.Add(new keywordsDataTable(ds.Tables["keywords"]));
                }
                if ((ds.Tables["theme"] != null)) {
                    base.Tables.Add(new themeDataTable(ds.Tables["theme"]));
                }
                if ((ds.Tables["distinfo"] != null)) {
                    base.Tables.Add(new distinfoDataTable(ds.Tables["distinfo"]));
                }
                if ((ds.Tables["metainfo"] != null)) {
                    base.Tables.Add(new metainfoDataTable(ds.Tables["metainfo"]));
                }
                if ((ds.Tables["metc"] != null)) {
                    base.Tables.Add(new metcDataTable(ds.Tables["metc"]));
                }
                if ((ds.Tables["cntinfo"] != null)) {
                    base.Tables.Add(new cntinfoDataTable(ds.Tables["cntinfo"]));
                }
                if ((ds.Tables["cntorgp"] != null)) {
                    base.Tables.Add(new cntorgpDataTable(ds.Tables["cntorgp"]));
                }
                if ((ds.Tables["cntaddr"] != null)) {
                    base.Tables.Add(new cntaddrDataTable(ds.Tables["cntaddr"]));
                }
                if ((ds.Tables["metextns"] != null)) {
                    base.Tables.Add(new metextnsDataTable(ds.Tables["metextns"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableidinfo = ((idinfoDataTable)(base.Tables["idinfo"]));
            if ((initTable == true)) {
                if ((this.tableidinfo != null)) {
                    this.tableidinfo.InitVars();
                }
            }
            this.tablecitation = ((citationDataTable)(base.Tables["citation"]));
            if ((initTable == true)) {
                if ((this.tablecitation != null)) {
                    this.tablecitation.InitVars();
                }
            }
            this.tableciteinfo = ((citeinfoDataTable)(base.Tables["citeinfo"]));
            if ((initTable == true)) {
                if ((this.tableciteinfo != null)) {
                    this.tableciteinfo.InitVars();
                }
            }
            this.tabledescript = ((descriptDataTable)(base.Tables["descript"]));
            if ((initTable == true)) {
                if ((this.tabledescript != null)) {
                    this.tabledescript.InitVars();
                }
            }
            this.tabletimeperd = ((timeperdDataTable)(base.Tables["timeperd"]));
            if ((initTable == true)) {
                if ((this.tabletimeperd != null)) {
                    this.tabletimeperd.InitVars();
                }
            }
            this.tabletimeinfo = ((timeinfoDataTable)(base.Tables["timeinfo"]));
            if ((initTable == true)) {
                if ((this.tabletimeinfo != null)) {
                    this.tabletimeinfo.InitVars();
                }
            }
            this.tablesngdate = ((sngdateDataTable)(base.Tables["sngdate"]));
            if ((initTable == true)) {
                if ((this.tablesngdate != null)) {
                    this.tablesngdate.InitVars();
                }
            }
            this.tablestatus = ((statusDataTable)(base.Tables["status"]));
            if ((initTable == true)) {
                if ((this.tablestatus != null)) {
                    this.tablestatus.InitVars();
                }
            }
            this.tablespdom = ((spdomDataTable)(base.Tables["spdom"]));
            if ((initTable == true)) {
                if ((this.tablespdom != null)) {
                    this.tablespdom.InitVars();
                }
            }
            this.tablebounding = ((boundingDataTable)(base.Tables["bounding"]));
            if ((initTable == true)) {
                if ((this.tablebounding != null)) {
                    this.tablebounding.InitVars();
                }
            }
            this.tablekeywords = ((keywordsDataTable)(base.Tables["keywords"]));
            if ((initTable == true)) {
                if ((this.tablekeywords != null)) {
                    this.tablekeywords.InitVars();
                }
            }
            this.tabletheme = ((themeDataTable)(base.Tables["theme"]));
            if ((initTable == true)) {
                if ((this.tabletheme != null)) {
                    this.tabletheme.InitVars();
                }
            }
            this.tabledistinfo = ((distinfoDataTable)(base.Tables["distinfo"]));
            if ((initTable == true)) {
                if ((this.tabledistinfo != null)) {
                    this.tabledistinfo.InitVars();
                }
            }
            this.tablemetainfo = ((metainfoDataTable)(base.Tables["metainfo"]));
            if ((initTable == true)) {
                if ((this.tablemetainfo != null)) {
                    this.tablemetainfo.InitVars();
                }
            }
            this.tablemetc = ((metcDataTable)(base.Tables["metc"]));
            if ((initTable == true)) {
                if ((this.tablemetc != null)) {
                    this.tablemetc.InitVars();
                }
            }
            this.tablecntinfo = ((cntinfoDataTable)(base.Tables["cntinfo"]));
            if ((initTable == true)) {
                if ((this.tablecntinfo != null)) {
                    this.tablecntinfo.InitVars();
                }
            }
            this.tablecntorgp = ((cntorgpDataTable)(base.Tables["cntorgp"]));
            if ((initTable == true)) {
                if ((this.tablecntorgp != null)) {
                    this.tablecntorgp.InitVars();
                }
            }
            this.tablecntaddr = ((cntaddrDataTable)(base.Tables["cntaddr"]));
            if ((initTable == true)) {
                if ((this.tablecntaddr != null)) {
                    this.tablecntaddr.InitVars();
                }
            }
            this.tablemetextns = ((metextnsDataTable)(base.Tables["metextns"]));
            if ((initTable == true)) {
                if ((this.tablemetextns != null)) {
                    this.tablemetextns.InitVars();
                }
            }
            this.relationidinfo_citation = this.Relations["idinfo_citation"];
            this.relationcitation_citeinfo = this.Relations["citation_citeinfo"];
            this.relationidinfo_descript = this.Relations["idinfo_descript"];
            this.relationidinfo_timeperd = this.Relations["idinfo_timeperd"];
            this.relationtimeperd_timeinfo = this.Relations["timeperd_timeinfo"];
            this.relationtimeinfo_sngdate = this.Relations["timeinfo_sngdate"];
            this.relationidinfo_status = this.Relations["idinfo_status"];
            this.relationidinfo_spdom = this.Relations["idinfo_spdom"];
            this.relationspdom_bounding = this.Relations["spdom_bounding"];
            this.relationidinfo_keywords = this.Relations["idinfo_keywords"];
            this.relationkeywords_theme = this.Relations["keywords_theme"];
            this.relationmetainfo_metc = this.Relations["metainfo_metc"];
            this.relationmetc_cntinfo = this.Relations["metc_cntinfo"];
            this.relationcntinfo_cntorgp = this.Relations["cntinfo_cntorgp"];
            this.relationcntinfo_cntaddr = this.Relations["cntinfo_cntaddr"];
            this.relationmetainfo_metextns = this.Relations["metainfo_metextns"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "metadata";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableidinfo = new idinfoDataTable();
            base.Tables.Add(this.tableidinfo);
            this.tablecitation = new citationDataTable();
            base.Tables.Add(this.tablecitation);
            this.tableciteinfo = new citeinfoDataTable();
            base.Tables.Add(this.tableciteinfo);
            this.tabledescript = new descriptDataTable();
            base.Tables.Add(this.tabledescript);
            this.tabletimeperd = new timeperdDataTable();
            base.Tables.Add(this.tabletimeperd);
            this.tabletimeinfo = new timeinfoDataTable();
            base.Tables.Add(this.tabletimeinfo);
            this.tablesngdate = new sngdateDataTable();
            base.Tables.Add(this.tablesngdate);
            this.tablestatus = new statusDataTable();
            base.Tables.Add(this.tablestatus);
            this.tablespdom = new spdomDataTable();
            base.Tables.Add(this.tablespdom);
            this.tablebounding = new boundingDataTable();
            base.Tables.Add(this.tablebounding);
            this.tablekeywords = new keywordsDataTable();
            base.Tables.Add(this.tablekeywords);
            this.tabletheme = new themeDataTable();
            base.Tables.Add(this.tabletheme);
            this.tabledistinfo = new distinfoDataTable();
            base.Tables.Add(this.tabledistinfo);
            this.tablemetainfo = new metainfoDataTable();
            base.Tables.Add(this.tablemetainfo);
            this.tablemetc = new metcDataTable();
            base.Tables.Add(this.tablemetc);
            this.tablecntinfo = new cntinfoDataTable();
            base.Tables.Add(this.tablecntinfo);
            this.tablecntorgp = new cntorgpDataTable();
            base.Tables.Add(this.tablecntorgp);
            this.tablecntaddr = new cntaddrDataTable();
            base.Tables.Add(this.tablecntaddr);
            this.tablemetextns = new metextnsDataTable();
            base.Tables.Add(this.tablemetextns);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("idinfo_citation", new System.Data.DataColumn[] {
                        this.tableidinfo.idinfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tablecitation.idinfo_IdColumn});
            this.tablecitation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("citation_citeinfo", new System.Data.DataColumn[] {
                        this.tablecitation.citation_IdColumn}, new System.Data.DataColumn[] {
                        this.tableciteinfo.citation_IdColumn});
            this.tableciteinfo.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("idinfo_descript", new System.Data.DataColumn[] {
                        this.tableidinfo.idinfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tabledescript.idinfo_IdColumn});
            this.tabledescript.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("idinfo_timeperd", new System.Data.DataColumn[] {
                        this.tableidinfo.idinfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tabletimeperd.idinfo_IdColumn});
            this.tabletimeperd.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("timeperd_timeinfo", new System.Data.DataColumn[] {
                        this.tabletimeperd.timeperd_IdColumn}, new System.Data.DataColumn[] {
                        this.tabletimeinfo.timeperd_IdColumn});
            this.tabletimeinfo.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("timeinfo_sngdate", new System.Data.DataColumn[] {
                        this.tabletimeinfo.timeinfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tablesngdate.timeinfo_IdColumn});
            this.tablesngdate.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("idinfo_status", new System.Data.DataColumn[] {
                        this.tableidinfo.idinfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tablestatus.idinfo_IdColumn});
            this.tablestatus.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("idinfo_spdom", new System.Data.DataColumn[] {
                        this.tableidinfo.idinfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tablespdom.idinfo_IdColumn});
            this.tablespdom.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("spdom_bounding", new System.Data.DataColumn[] {
                        this.tablespdom.spdom_IdColumn}, new System.Data.DataColumn[] {
                        this.tablebounding.spdom_IdColumn});
            this.tablebounding.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("idinfo_keywords", new System.Data.DataColumn[] {
                        this.tableidinfo.idinfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tablekeywords.idinfo_IdColumn});
            this.tablekeywords.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("keywords_theme", new System.Data.DataColumn[] {
                        this.tablekeywords.keywords_IdColumn}, new System.Data.DataColumn[] {
                        this.tabletheme.keywords_IdColumn});
            this.tabletheme.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("metainfo_metc", new System.Data.DataColumn[] {
                        this.tablemetainfo.metainfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tablemetc.metainfo_IdColumn});
            this.tablemetc.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("metc_cntinfo", new System.Data.DataColumn[] {
                        this.tablemetc.metc_IdColumn}, new System.Data.DataColumn[] {
                        this.tablecntinfo.metc_IdColumn});
            this.tablecntinfo.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("cntinfo_cntorgp", new System.Data.DataColumn[] {
                        this.tablecntinfo.cntinfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tablecntorgp.cntinfo_IdColumn});
            this.tablecntorgp.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("cntinfo_cntaddr", new System.Data.DataColumn[] {
                        this.tablecntinfo.cntinfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tablecntaddr.cntinfo_IdColumn});
            this.tablecntaddr.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("metainfo_metextns", new System.Data.DataColumn[] {
                        this.tablemetainfo.metainfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tablemetextns.metainfo_IdColumn});
            this.tablemetextns.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationidinfo_citation = new System.Data.DataRelation("idinfo_citation", new System.Data.DataColumn[] {
                        this.tableidinfo.idinfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tablecitation.idinfo_IdColumn}, false);
            this.relationidinfo_citation.Nested = true;
            this.Relations.Add(this.relationidinfo_citation);
            this.relationcitation_citeinfo = new System.Data.DataRelation("citation_citeinfo", new System.Data.DataColumn[] {
                        this.tablecitation.citation_IdColumn}, new System.Data.DataColumn[] {
                        this.tableciteinfo.citation_IdColumn}, false);
            this.relationcitation_citeinfo.Nested = true;
            this.Relations.Add(this.relationcitation_citeinfo);
            this.relationidinfo_descript = new System.Data.DataRelation("idinfo_descript", new System.Data.DataColumn[] {
                        this.tableidinfo.idinfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tabledescript.idinfo_IdColumn}, false);
            this.relationidinfo_descript.Nested = true;
            this.Relations.Add(this.relationidinfo_descript);
            this.relationidinfo_timeperd = new System.Data.DataRelation("idinfo_timeperd", new System.Data.DataColumn[] {
                        this.tableidinfo.idinfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tabletimeperd.idinfo_IdColumn}, false);
            this.relationidinfo_timeperd.Nested = true;
            this.Relations.Add(this.relationidinfo_timeperd);
            this.relationtimeperd_timeinfo = new System.Data.DataRelation("timeperd_timeinfo", new System.Data.DataColumn[] {
                        this.tabletimeperd.timeperd_IdColumn}, new System.Data.DataColumn[] {
                        this.tabletimeinfo.timeperd_IdColumn}, false);
            this.relationtimeperd_timeinfo.Nested = true;
            this.Relations.Add(this.relationtimeperd_timeinfo);
            this.relationtimeinfo_sngdate = new System.Data.DataRelation("timeinfo_sngdate", new System.Data.DataColumn[] {
                        this.tabletimeinfo.timeinfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tablesngdate.timeinfo_IdColumn}, false);
            this.relationtimeinfo_sngdate.Nested = true;
            this.Relations.Add(this.relationtimeinfo_sngdate);
            this.relationidinfo_status = new System.Data.DataRelation("idinfo_status", new System.Data.DataColumn[] {
                        this.tableidinfo.idinfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tablestatus.idinfo_IdColumn}, false);
            this.relationidinfo_status.Nested = true;
            this.Relations.Add(this.relationidinfo_status);
            this.relationidinfo_spdom = new System.Data.DataRelation("idinfo_spdom", new System.Data.DataColumn[] {
                        this.tableidinfo.idinfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tablespdom.idinfo_IdColumn}, false);
            this.relationidinfo_spdom.Nested = true;
            this.Relations.Add(this.relationidinfo_spdom);
            this.relationspdom_bounding = new System.Data.DataRelation("spdom_bounding", new System.Data.DataColumn[] {
                        this.tablespdom.spdom_IdColumn}, new System.Data.DataColumn[] {
                        this.tablebounding.spdom_IdColumn}, false);
            this.relationspdom_bounding.Nested = true;
            this.Relations.Add(this.relationspdom_bounding);
            this.relationidinfo_keywords = new System.Data.DataRelation("idinfo_keywords", new System.Data.DataColumn[] {
                        this.tableidinfo.idinfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tablekeywords.idinfo_IdColumn}, false);
            this.relationidinfo_keywords.Nested = true;
            this.Relations.Add(this.relationidinfo_keywords);
            this.relationkeywords_theme = new System.Data.DataRelation("keywords_theme", new System.Data.DataColumn[] {
                        this.tablekeywords.keywords_IdColumn}, new System.Data.DataColumn[] {
                        this.tabletheme.keywords_IdColumn}, false);
            this.relationkeywords_theme.Nested = true;
            this.Relations.Add(this.relationkeywords_theme);
            this.relationmetainfo_metc = new System.Data.DataRelation("metainfo_metc", new System.Data.DataColumn[] {
                        this.tablemetainfo.metainfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tablemetc.metainfo_IdColumn}, false);
            this.relationmetainfo_metc.Nested = true;
            this.Relations.Add(this.relationmetainfo_metc);
            this.relationmetc_cntinfo = new System.Data.DataRelation("metc_cntinfo", new System.Data.DataColumn[] {
                        this.tablemetc.metc_IdColumn}, new System.Data.DataColumn[] {
                        this.tablecntinfo.metc_IdColumn}, false);
            this.relationmetc_cntinfo.Nested = true;
            this.Relations.Add(this.relationmetc_cntinfo);
            this.relationcntinfo_cntorgp = new System.Data.DataRelation("cntinfo_cntorgp", new System.Data.DataColumn[] {
                        this.tablecntinfo.cntinfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tablecntorgp.cntinfo_IdColumn}, false);
            this.relationcntinfo_cntorgp.Nested = true;
            this.Relations.Add(this.relationcntinfo_cntorgp);
            this.relationcntinfo_cntaddr = new System.Data.DataRelation("cntinfo_cntaddr", new System.Data.DataColumn[] {
                        this.tablecntinfo.cntinfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tablecntaddr.cntinfo_IdColumn}, false);
            this.relationcntinfo_cntaddr.Nested = true;
            this.Relations.Add(this.relationcntinfo_cntaddr);
            this.relationmetainfo_metextns = new System.Data.DataRelation("metainfo_metextns", new System.Data.DataColumn[] {
                        this.tablemetainfo.metainfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tablemetextns.metainfo_IdColumn}, false);
            this.relationmetainfo_metextns.Nested = true;
            this.Relations.Add(this.relationmetainfo_metextns);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeidinfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecitation() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeciteinfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedescript() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetimeperd() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetimeinfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesngdate() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializestatus() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializespdom() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializebounding() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializekeywords() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetheme() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedistinfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializemetainfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializemetc() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecntinfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecntorgp() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecntaddr() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializemetextns() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            metadata ds = new metadata();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void idinfoRowChangeEventHandler(object sender, idinfoRowChangeEvent e);
        
        public delegate void citationRowChangeEventHandler(object sender, citationRowChangeEvent e);
        
        public delegate void citeinfoRowChangeEventHandler(object sender, citeinfoRowChangeEvent e);
        
        public delegate void descriptRowChangeEventHandler(object sender, descriptRowChangeEvent e);
        
        public delegate void timeperdRowChangeEventHandler(object sender, timeperdRowChangeEvent e);
        
        public delegate void timeinfoRowChangeEventHandler(object sender, timeinfoRowChangeEvent e);
        
        public delegate void sngdateRowChangeEventHandler(object sender, sngdateRowChangeEvent e);
        
        public delegate void statusRowChangeEventHandler(object sender, statusRowChangeEvent e);
        
        public delegate void spdomRowChangeEventHandler(object sender, spdomRowChangeEvent e);
        
        public delegate void boundingRowChangeEventHandler(object sender, boundingRowChangeEvent e);
        
        public delegate void keywordsRowChangeEventHandler(object sender, keywordsRowChangeEvent e);
        
        public delegate void themeRowChangeEventHandler(object sender, themeRowChangeEvent e);
        
        public delegate void distinfoRowChangeEventHandler(object sender, distinfoRowChangeEvent e);
        
        public delegate void metainfoRowChangeEventHandler(object sender, metainfoRowChangeEvent e);
        
        public delegate void metcRowChangeEventHandler(object sender, metcRowChangeEvent e);
        
        public delegate void cntinfoRowChangeEventHandler(object sender, cntinfoRowChangeEvent e);
        
        public delegate void cntorgpRowChangeEventHandler(object sender, cntorgpRowChangeEvent e);
        
        public delegate void cntaddrRowChangeEventHandler(object sender, cntaddrRowChangeEvent e);
        
        public delegate void metextnsRowChangeEventHandler(object sender, metextnsRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class idinfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnaccconst;
            
            private System.Data.DataColumn columnuseconst;
            
            private System.Data.DataColumn columnnative;
            
            private System.Data.DataColumn columnidinfo_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public idinfoDataTable() {
                this.TableName = "idinfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal idinfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected idinfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn accconstColumn {
                get {
                    return this.columnaccconst;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn useconstColumn {
                get {
                    return this.columnuseconst;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nativeColumn {
                get {
                    return this.columnnative;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idinfo_IdColumn {
                get {
                    return this.columnidinfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public idinfoRow this[int index] {
                get {
                    return ((idinfoRow)(this.Rows[index]));
                }
            }
            
            public event idinfoRowChangeEventHandler idinfoRowChanging;
            
            public event idinfoRowChangeEventHandler idinfoRowChanged;
            
            public event idinfoRowChangeEventHandler idinfoRowDeleting;
            
            public event idinfoRowChangeEventHandler idinfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddidinfoRow(idinfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public idinfoRow AddidinfoRow(string accconst, string useconst, string native) {
                idinfoRow rowidinfoRow = ((idinfoRow)(this.NewRow()));
                rowidinfoRow.ItemArray = new object[] {
                        accconst,
                        useconst,
                        native,
                        null};
                this.Rows.Add(rowidinfoRow);
                return rowidinfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                idinfoDataTable cln = ((idinfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new idinfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnaccconst = base.Columns["accconst"];
                this.columnuseconst = base.Columns["useconst"];
                this.columnnative = base.Columns["native"];
                this.columnidinfo_Id = base.Columns["idinfo_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnaccconst = new System.Data.DataColumn("accconst", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccconst);
                this.columnuseconst = new System.Data.DataColumn("useconst", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuseconst);
                this.columnnative = new System.Data.DataColumn("native", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnative);
                this.columnidinfo_Id = new System.Data.DataColumn("idinfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnidinfo_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnidinfo_Id}, true));
                this.columnidinfo_Id.AutoIncrement = true;
                this.columnidinfo_Id.AllowDBNull = false;
                this.columnidinfo_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public idinfoRow NewidinfoRow() {
                return ((idinfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new idinfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(idinfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.idinfoRowChanged != null)) {
                    this.idinfoRowChanged(this, new idinfoRowChangeEvent(((idinfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.idinfoRowChanging != null)) {
                    this.idinfoRowChanging(this, new idinfoRowChangeEvent(((idinfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.idinfoRowDeleted != null)) {
                    this.idinfoRowDeleted(this, new idinfoRowChangeEvent(((idinfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.idinfoRowDeleting != null)) {
                    this.idinfoRowDeleting(this, new idinfoRowChangeEvent(((idinfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveidinfoRow(idinfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                metadata ds = new metadata();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "idinfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class citationDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columncitation_Id;
            
            private System.Data.DataColumn columnidinfo_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public citationDataTable() {
                this.TableName = "citation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal citationDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected citationDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn citation_IdColumn {
                get {
                    return this.columncitation_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idinfo_IdColumn {
                get {
                    return this.columnidinfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public citationRow this[int index] {
                get {
                    return ((citationRow)(this.Rows[index]));
                }
            }
            
            public event citationRowChangeEventHandler citationRowChanging;
            
            public event citationRowChangeEventHandler citationRowChanged;
            
            public event citationRowChangeEventHandler citationRowDeleting;
            
            public event citationRowChangeEventHandler citationRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcitationRow(citationRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public citationRow AddcitationRow(idinfoRow parentidinfoRowByidinfo_citation) {
                citationRow rowcitationRow = ((citationRow)(this.NewRow()));
                rowcitationRow.ItemArray = new object[] {
                        null,
                        parentidinfoRowByidinfo_citation[3]};
                this.Rows.Add(rowcitationRow);
                return rowcitationRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                citationDataTable cln = ((citationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new citationDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncitation_Id = base.Columns["citation_Id"];
                this.columnidinfo_Id = base.Columns["idinfo_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncitation_Id = new System.Data.DataColumn("citation_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncitation_Id);
                this.columnidinfo_Id = new System.Data.DataColumn("idinfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnidinfo_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columncitation_Id}, true));
                this.columncitation_Id.AutoIncrement = true;
                this.columncitation_Id.AllowDBNull = false;
                this.columncitation_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public citationRow NewcitationRow() {
                return ((citationRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new citationRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(citationRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.citationRowChanged != null)) {
                    this.citationRowChanged(this, new citationRowChangeEvent(((citationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.citationRowChanging != null)) {
                    this.citationRowChanging(this, new citationRowChangeEvent(((citationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.citationRowDeleted != null)) {
                    this.citationRowDeleted(this, new citationRowChangeEvent(((citationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.citationRowDeleting != null)) {
                    this.citationRowDeleting(this, new citationRowChangeEvent(((citationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecitationRow(citationRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                metadata ds = new metadata();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "citationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class citeinfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnorigin;
            
            private System.Data.DataColumn columnpubdate;
            
            private System.Data.DataColumn columntitle;
            
            private System.Data.DataColumn columncitation_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public citeinfoDataTable() {
                this.TableName = "citeinfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal citeinfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected citeinfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn originColumn {
                get {
                    return this.columnorigin;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pubdateColumn {
                get {
                    return this.columnpubdate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn titleColumn {
                get {
                    return this.columntitle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn citation_IdColumn {
                get {
                    return this.columncitation_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public citeinfoRow this[int index] {
                get {
                    return ((citeinfoRow)(this.Rows[index]));
                }
            }
            
            public event citeinfoRowChangeEventHandler citeinfoRowChanging;
            
            public event citeinfoRowChangeEventHandler citeinfoRowChanged;
            
            public event citeinfoRowChangeEventHandler citeinfoRowDeleting;
            
            public event citeinfoRowChangeEventHandler citeinfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddciteinfoRow(citeinfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public citeinfoRow AddciteinfoRow(string origin, string pubdate, string title, citationRow parentcitationRowBycitation_citeinfo) {
                citeinfoRow rowciteinfoRow = ((citeinfoRow)(this.NewRow()));
                rowciteinfoRow.ItemArray = new object[] {
                        origin,
                        pubdate,
                        title,
                        parentcitationRowBycitation_citeinfo[0]};
                this.Rows.Add(rowciteinfoRow);
                return rowciteinfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                citeinfoDataTable cln = ((citeinfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new citeinfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnorigin = base.Columns["origin"];
                this.columnpubdate = base.Columns["pubdate"];
                this.columntitle = base.Columns["title"];
                this.columncitation_Id = base.Columns["citation_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnorigin = new System.Data.DataColumn("origin", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnorigin);
                this.columnpubdate = new System.Data.DataColumn("pubdate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpubdate);
                this.columntitle = new System.Data.DataColumn("title", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntitle);
                this.columncitation_Id = new System.Data.DataColumn("citation_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncitation_Id);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public citeinfoRow NewciteinfoRow() {
                return ((citeinfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new citeinfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(citeinfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.citeinfoRowChanged != null)) {
                    this.citeinfoRowChanged(this, new citeinfoRowChangeEvent(((citeinfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.citeinfoRowChanging != null)) {
                    this.citeinfoRowChanging(this, new citeinfoRowChangeEvent(((citeinfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.citeinfoRowDeleted != null)) {
                    this.citeinfoRowDeleted(this, new citeinfoRowChangeEvent(((citeinfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.citeinfoRowDeleting != null)) {
                    this.citeinfoRowDeleting(this, new citeinfoRowChangeEvent(((citeinfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveciteinfoRow(citeinfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                metadata ds = new metadata();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "citeinfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class descriptDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn column_abstract;
            
            private System.Data.DataColumn columnpurpose;
            
            private System.Data.DataColumn columnidinfo_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descriptDataTable() {
                this.TableName = "descript";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal descriptDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected descriptDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _abstractColumn {
                get {
                    return this.column_abstract;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn purposeColumn {
                get {
                    return this.columnpurpose;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idinfo_IdColumn {
                get {
                    return this.columnidinfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descriptRow this[int index] {
                get {
                    return ((descriptRow)(this.Rows[index]));
                }
            }
            
            public event descriptRowChangeEventHandler descriptRowChanging;
            
            public event descriptRowChangeEventHandler descriptRowChanged;
            
            public event descriptRowChangeEventHandler descriptRowDeleting;
            
            public event descriptRowChangeEventHandler descriptRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddescriptRow(descriptRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descriptRow AdddescriptRow(string _abstract, string purpose, idinfoRow parentidinfoRowByidinfo_descript) {
                descriptRow rowdescriptRow = ((descriptRow)(this.NewRow()));
                rowdescriptRow.ItemArray = new object[] {
                        _abstract,
                        purpose,
                        parentidinfoRowByidinfo_descript[3]};
                this.Rows.Add(rowdescriptRow);
                return rowdescriptRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                descriptDataTable cln = ((descriptDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new descriptDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column_abstract = base.Columns["abstract"];
                this.columnpurpose = base.Columns["purpose"];
                this.columnidinfo_Id = base.Columns["idinfo_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column_abstract = new System.Data.DataColumn("abstract", typeof(string), null, System.Data.MappingType.Element);
                this.column_abstract.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_abstract");
                this.column_abstract.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_abstractColumn");
                this.column_abstract.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_abstract");
                this.column_abstract.ExtendedProperties.Add("Generator_UserColumnName", "abstract");
                base.Columns.Add(this.column_abstract);
                this.columnpurpose = new System.Data.DataColumn("purpose", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpurpose);
                this.columnidinfo_Id = new System.Data.DataColumn("idinfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnidinfo_Id);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descriptRow NewdescriptRow() {
                return ((descriptRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new descriptRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(descriptRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.descriptRowChanged != null)) {
                    this.descriptRowChanged(this, new descriptRowChangeEvent(((descriptRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.descriptRowChanging != null)) {
                    this.descriptRowChanging(this, new descriptRowChangeEvent(((descriptRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.descriptRowDeleted != null)) {
                    this.descriptRowDeleted(this, new descriptRowChangeEvent(((descriptRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.descriptRowDeleting != null)) {
                    this.descriptRowDeleting(this, new descriptRowChangeEvent(((descriptRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedescriptRow(descriptRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                metadata ds = new metadata();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "descriptDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class timeperdDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columncurrent;
            
            private System.Data.DataColumn columntimeperd_Id;
            
            private System.Data.DataColumn columnidinfo_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public timeperdDataTable() {
                this.TableName = "timeperd";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal timeperdDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected timeperdDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn currentColumn {
                get {
                    return this.columncurrent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn timeperd_IdColumn {
                get {
                    return this.columntimeperd_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idinfo_IdColumn {
                get {
                    return this.columnidinfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public timeperdRow this[int index] {
                get {
                    return ((timeperdRow)(this.Rows[index]));
                }
            }
            
            public event timeperdRowChangeEventHandler timeperdRowChanging;
            
            public event timeperdRowChangeEventHandler timeperdRowChanged;
            
            public event timeperdRowChangeEventHandler timeperdRowDeleting;
            
            public event timeperdRowChangeEventHandler timeperdRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtimeperdRow(timeperdRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public timeperdRow AddtimeperdRow(string current, idinfoRow parentidinfoRowByidinfo_timeperd) {
                timeperdRow rowtimeperdRow = ((timeperdRow)(this.NewRow()));
                rowtimeperdRow.ItemArray = new object[] {
                        current,
                        null,
                        parentidinfoRowByidinfo_timeperd[3]};
                this.Rows.Add(rowtimeperdRow);
                return rowtimeperdRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                timeperdDataTable cln = ((timeperdDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new timeperdDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncurrent = base.Columns["current"];
                this.columntimeperd_Id = base.Columns["timeperd_Id"];
                this.columnidinfo_Id = base.Columns["idinfo_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncurrent = new System.Data.DataColumn("current", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncurrent);
                this.columntimeperd_Id = new System.Data.DataColumn("timeperd_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columntimeperd_Id);
                this.columnidinfo_Id = new System.Data.DataColumn("idinfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnidinfo_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columntimeperd_Id}, true));
                this.columntimeperd_Id.AutoIncrement = true;
                this.columntimeperd_Id.AllowDBNull = false;
                this.columntimeperd_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public timeperdRow NewtimeperdRow() {
                return ((timeperdRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new timeperdRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(timeperdRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.timeperdRowChanged != null)) {
                    this.timeperdRowChanged(this, new timeperdRowChangeEvent(((timeperdRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.timeperdRowChanging != null)) {
                    this.timeperdRowChanging(this, new timeperdRowChangeEvent(((timeperdRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.timeperdRowDeleted != null)) {
                    this.timeperdRowDeleted(this, new timeperdRowChangeEvent(((timeperdRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.timeperdRowDeleting != null)) {
                    this.timeperdRowDeleting(this, new timeperdRowChangeEvent(((timeperdRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetimeperdRow(timeperdRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                metadata ds = new metadata();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "timeperdDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class timeinfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columntimeinfo_Id;
            
            private System.Data.DataColumn columntimeperd_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public timeinfoDataTable() {
                this.TableName = "timeinfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal timeinfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected timeinfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn timeinfo_IdColumn {
                get {
                    return this.columntimeinfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn timeperd_IdColumn {
                get {
                    return this.columntimeperd_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public timeinfoRow this[int index] {
                get {
                    return ((timeinfoRow)(this.Rows[index]));
                }
            }
            
            public event timeinfoRowChangeEventHandler timeinfoRowChanging;
            
            public event timeinfoRowChangeEventHandler timeinfoRowChanged;
            
            public event timeinfoRowChangeEventHandler timeinfoRowDeleting;
            
            public event timeinfoRowChangeEventHandler timeinfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtimeinfoRow(timeinfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public timeinfoRow AddtimeinfoRow(timeperdRow parenttimeperdRowBytimeperd_timeinfo) {
                timeinfoRow rowtimeinfoRow = ((timeinfoRow)(this.NewRow()));
                rowtimeinfoRow.ItemArray = new object[] {
                        null,
                        parenttimeperdRowBytimeperd_timeinfo[1]};
                this.Rows.Add(rowtimeinfoRow);
                return rowtimeinfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                timeinfoDataTable cln = ((timeinfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new timeinfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntimeinfo_Id = base.Columns["timeinfo_Id"];
                this.columntimeperd_Id = base.Columns["timeperd_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntimeinfo_Id = new System.Data.DataColumn("timeinfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columntimeinfo_Id);
                this.columntimeperd_Id = new System.Data.DataColumn("timeperd_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columntimeperd_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columntimeinfo_Id}, true));
                this.columntimeinfo_Id.AutoIncrement = true;
                this.columntimeinfo_Id.AllowDBNull = false;
                this.columntimeinfo_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public timeinfoRow NewtimeinfoRow() {
                return ((timeinfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new timeinfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(timeinfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.timeinfoRowChanged != null)) {
                    this.timeinfoRowChanged(this, new timeinfoRowChangeEvent(((timeinfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.timeinfoRowChanging != null)) {
                    this.timeinfoRowChanging(this, new timeinfoRowChangeEvent(((timeinfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.timeinfoRowDeleted != null)) {
                    this.timeinfoRowDeleted(this, new timeinfoRowChangeEvent(((timeinfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.timeinfoRowDeleting != null)) {
                    this.timeinfoRowDeleting(this, new timeinfoRowChangeEvent(((timeinfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetimeinfoRow(timeinfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                metadata ds = new metadata();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "timeinfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class sngdateDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columncaldate;
            
            private System.Data.DataColumn columntimeinfo_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sngdateDataTable() {
                this.TableName = "sngdate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sngdateDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected sngdateDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn caldateColumn {
                get {
                    return this.columncaldate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn timeinfo_IdColumn {
                get {
                    return this.columntimeinfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sngdateRow this[int index] {
                get {
                    return ((sngdateRow)(this.Rows[index]));
                }
            }
            
            public event sngdateRowChangeEventHandler sngdateRowChanging;
            
            public event sngdateRowChangeEventHandler sngdateRowChanged;
            
            public event sngdateRowChangeEventHandler sngdateRowDeleting;
            
            public event sngdateRowChangeEventHandler sngdateRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddsngdateRow(sngdateRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sngdateRow AddsngdateRow(string caldate, timeinfoRow parenttimeinfoRowBytimeinfo_sngdate) {
                sngdateRow rowsngdateRow = ((sngdateRow)(this.NewRow()));
                rowsngdateRow.ItemArray = new object[] {
                        caldate,
                        parenttimeinfoRowBytimeinfo_sngdate[0]};
                this.Rows.Add(rowsngdateRow);
                return rowsngdateRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                sngdateDataTable cln = ((sngdateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new sngdateDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncaldate = base.Columns["caldate"];
                this.columntimeinfo_Id = base.Columns["timeinfo_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncaldate = new System.Data.DataColumn("caldate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncaldate);
                this.columntimeinfo_Id = new System.Data.DataColumn("timeinfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columntimeinfo_Id);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sngdateRow NewsngdateRow() {
                return ((sngdateRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new sngdateRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(sngdateRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sngdateRowChanged != null)) {
                    this.sngdateRowChanged(this, new sngdateRowChangeEvent(((sngdateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sngdateRowChanging != null)) {
                    this.sngdateRowChanging(this, new sngdateRowChangeEvent(((sngdateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sngdateRowDeleted != null)) {
                    this.sngdateRowDeleted(this, new sngdateRowChangeEvent(((sngdateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sngdateRowDeleting != null)) {
                    this.sngdateRowDeleting(this, new sngdateRowChangeEvent(((sngdateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovesngdateRow(sngdateRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                metadata ds = new metadata();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "sngdateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class statusDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnprogress;
            
            private System.Data.DataColumn columnupdate;
            
            private System.Data.DataColumn columnidinfo_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public statusDataTable() {
                this.TableName = "status";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal statusDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected statusDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn progressColumn {
                get {
                    return this.columnprogress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn updateColumn {
                get {
                    return this.columnupdate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idinfo_IdColumn {
                get {
                    return this.columnidinfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public statusRow this[int index] {
                get {
                    return ((statusRow)(this.Rows[index]));
                }
            }
            
            public event statusRowChangeEventHandler statusRowChanging;
            
            public event statusRowChangeEventHandler statusRowChanged;
            
            public event statusRowChangeEventHandler statusRowDeleting;
            
            public event statusRowChangeEventHandler statusRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddstatusRow(statusRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public statusRow AddstatusRow(string progress, string update, idinfoRow parentidinfoRowByidinfo_status) {
                statusRow rowstatusRow = ((statusRow)(this.NewRow()));
                rowstatusRow.ItemArray = new object[] {
                        progress,
                        update,
                        parentidinfoRowByidinfo_status[3]};
                this.Rows.Add(rowstatusRow);
                return rowstatusRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                statusDataTable cln = ((statusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new statusDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnprogress = base.Columns["progress"];
                this.columnupdate = base.Columns["update"];
                this.columnidinfo_Id = base.Columns["idinfo_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnprogress = new System.Data.DataColumn("progress", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprogress);
                this.columnupdate = new System.Data.DataColumn("update", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnupdate);
                this.columnidinfo_Id = new System.Data.DataColumn("idinfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnidinfo_Id);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public statusRow NewstatusRow() {
                return ((statusRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new statusRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(statusRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.statusRowChanged != null)) {
                    this.statusRowChanged(this, new statusRowChangeEvent(((statusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.statusRowChanging != null)) {
                    this.statusRowChanging(this, new statusRowChangeEvent(((statusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.statusRowDeleted != null)) {
                    this.statusRowDeleted(this, new statusRowChangeEvent(((statusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.statusRowDeleting != null)) {
                    this.statusRowDeleting(this, new statusRowChangeEvent(((statusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovestatusRow(statusRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                metadata ds = new metadata();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "statusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class spdomDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnspdom_Id;
            
            private System.Data.DataColumn columnidinfo_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spdomDataTable() {
                this.TableName = "spdom";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal spdomDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected spdomDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn spdom_IdColumn {
                get {
                    return this.columnspdom_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idinfo_IdColumn {
                get {
                    return this.columnidinfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spdomRow this[int index] {
                get {
                    return ((spdomRow)(this.Rows[index]));
                }
            }
            
            public event spdomRowChangeEventHandler spdomRowChanging;
            
            public event spdomRowChangeEventHandler spdomRowChanged;
            
            public event spdomRowChangeEventHandler spdomRowDeleting;
            
            public event spdomRowChangeEventHandler spdomRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddspdomRow(spdomRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spdomRow AddspdomRow(idinfoRow parentidinfoRowByidinfo_spdom) {
                spdomRow rowspdomRow = ((spdomRow)(this.NewRow()));
                rowspdomRow.ItemArray = new object[] {
                        null,
                        parentidinfoRowByidinfo_spdom[3]};
                this.Rows.Add(rowspdomRow);
                return rowspdomRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                spdomDataTable cln = ((spdomDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new spdomDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnspdom_Id = base.Columns["spdom_Id"];
                this.columnidinfo_Id = base.Columns["idinfo_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnspdom_Id = new System.Data.DataColumn("spdom_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnspdom_Id);
                this.columnidinfo_Id = new System.Data.DataColumn("idinfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnidinfo_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnspdom_Id}, true));
                this.columnspdom_Id.AutoIncrement = true;
                this.columnspdom_Id.AllowDBNull = false;
                this.columnspdom_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spdomRow NewspdomRow() {
                return ((spdomRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new spdomRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(spdomRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.spdomRowChanged != null)) {
                    this.spdomRowChanged(this, new spdomRowChangeEvent(((spdomRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.spdomRowChanging != null)) {
                    this.spdomRowChanging(this, new spdomRowChangeEvent(((spdomRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.spdomRowDeleted != null)) {
                    this.spdomRowDeleted(this, new spdomRowChangeEvent(((spdomRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.spdomRowDeleting != null)) {
                    this.spdomRowDeleting(this, new spdomRowChangeEvent(((spdomRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovespdomRow(spdomRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                metadata ds = new metadata();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "spdomDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class boundingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnwestbc;
            
            private System.Data.DataColumn columneastbc;
            
            private System.Data.DataColumn columnnorthbc;
            
            private System.Data.DataColumn columnsouthbc;
            
            private System.Data.DataColumn columnspdom_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public boundingDataTable() {
                this.TableName = "bounding";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal boundingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected boundingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn westbcColumn {
                get {
                    return this.columnwestbc;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn eastbcColumn {
                get {
                    return this.columneastbc;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn northbcColumn {
                get {
                    return this.columnnorthbc;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn southbcColumn {
                get {
                    return this.columnsouthbc;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn spdom_IdColumn {
                get {
                    return this.columnspdom_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public boundingRow this[int index] {
                get {
                    return ((boundingRow)(this.Rows[index]));
                }
            }
            
            public event boundingRowChangeEventHandler boundingRowChanging;
            
            public event boundingRowChangeEventHandler boundingRowChanged;
            
            public event boundingRowChangeEventHandler boundingRowDeleting;
            
            public event boundingRowChangeEventHandler boundingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddboundingRow(boundingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public boundingRow AddboundingRow(string westbc, string eastbc, string northbc, string southbc, spdomRow parentspdomRowByspdom_bounding) {
                boundingRow rowboundingRow = ((boundingRow)(this.NewRow()));
                rowboundingRow.ItemArray = new object[] {
                        westbc,
                        eastbc,
                        northbc,
                        southbc,
                        parentspdomRowByspdom_bounding[0]};
                this.Rows.Add(rowboundingRow);
                return rowboundingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                boundingDataTable cln = ((boundingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new boundingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnwestbc = base.Columns["westbc"];
                this.columneastbc = base.Columns["eastbc"];
                this.columnnorthbc = base.Columns["northbc"];
                this.columnsouthbc = base.Columns["southbc"];
                this.columnspdom_Id = base.Columns["spdom_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnwestbc = new System.Data.DataColumn("westbc", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnwestbc);
                this.columneastbc = new System.Data.DataColumn("eastbc", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columneastbc);
                this.columnnorthbc = new System.Data.DataColumn("northbc", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnorthbc);
                this.columnsouthbc = new System.Data.DataColumn("southbc", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsouthbc);
                this.columnspdom_Id = new System.Data.DataColumn("spdom_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnspdom_Id);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public boundingRow NewboundingRow() {
                return ((boundingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new boundingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(boundingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.boundingRowChanged != null)) {
                    this.boundingRowChanged(this, new boundingRowChangeEvent(((boundingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.boundingRowChanging != null)) {
                    this.boundingRowChanging(this, new boundingRowChangeEvent(((boundingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.boundingRowDeleted != null)) {
                    this.boundingRowDeleted(this, new boundingRowChangeEvent(((boundingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.boundingRowDeleting != null)) {
                    this.boundingRowDeleting(this, new boundingRowChangeEvent(((boundingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveboundingRow(boundingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                metadata ds = new metadata();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "boundingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class keywordsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnkeywords_Id;
            
            private System.Data.DataColumn columnidinfo_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public keywordsDataTable() {
                this.TableName = "keywords";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal keywordsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected keywordsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn keywords_IdColumn {
                get {
                    return this.columnkeywords_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idinfo_IdColumn {
                get {
                    return this.columnidinfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public keywordsRow this[int index] {
                get {
                    return ((keywordsRow)(this.Rows[index]));
                }
            }
            
            public event keywordsRowChangeEventHandler keywordsRowChanging;
            
            public event keywordsRowChangeEventHandler keywordsRowChanged;
            
            public event keywordsRowChangeEventHandler keywordsRowDeleting;
            
            public event keywordsRowChangeEventHandler keywordsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddkeywordsRow(keywordsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public keywordsRow AddkeywordsRow(idinfoRow parentidinfoRowByidinfo_keywords) {
                keywordsRow rowkeywordsRow = ((keywordsRow)(this.NewRow()));
                rowkeywordsRow.ItemArray = new object[] {
                        null,
                        parentidinfoRowByidinfo_keywords[3]};
                this.Rows.Add(rowkeywordsRow);
                return rowkeywordsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                keywordsDataTable cln = ((keywordsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new keywordsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnkeywords_Id = base.Columns["keywords_Id"];
                this.columnidinfo_Id = base.Columns["idinfo_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnkeywords_Id = new System.Data.DataColumn("keywords_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnkeywords_Id);
                this.columnidinfo_Id = new System.Data.DataColumn("idinfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnidinfo_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnkeywords_Id}, true));
                this.columnkeywords_Id.AutoIncrement = true;
                this.columnkeywords_Id.AllowDBNull = false;
                this.columnkeywords_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public keywordsRow NewkeywordsRow() {
                return ((keywordsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new keywordsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(keywordsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.keywordsRowChanged != null)) {
                    this.keywordsRowChanged(this, new keywordsRowChangeEvent(((keywordsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.keywordsRowChanging != null)) {
                    this.keywordsRowChanging(this, new keywordsRowChangeEvent(((keywordsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.keywordsRowDeleted != null)) {
                    this.keywordsRowDeleted(this, new keywordsRowChangeEvent(((keywordsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.keywordsRowDeleting != null)) {
                    this.keywordsRowDeleting(this, new keywordsRowChangeEvent(((keywordsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovekeywordsRow(keywordsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                metadata ds = new metadata();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "keywordsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class themeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnthemekt;
            
            private System.Data.DataColumn columnthemekey;
            
            private System.Data.DataColumn columnkeywords_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public themeDataTable() {
                this.TableName = "theme";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal themeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected themeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn themektColumn {
                get {
                    return this.columnthemekt;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn themekeyColumn {
                get {
                    return this.columnthemekey;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn keywords_IdColumn {
                get {
                    return this.columnkeywords_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public themeRow this[int index] {
                get {
                    return ((themeRow)(this.Rows[index]));
                }
            }
            
            public event themeRowChangeEventHandler themeRowChanging;
            
            public event themeRowChangeEventHandler themeRowChanged;
            
            public event themeRowChangeEventHandler themeRowDeleting;
            
            public event themeRowChangeEventHandler themeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddthemeRow(themeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public themeRow AddthemeRow(string themekt, string themekey, keywordsRow parentkeywordsRowBykeywords_theme) {
                themeRow rowthemeRow = ((themeRow)(this.NewRow()));
                rowthemeRow.ItemArray = new object[] {
                        themekt,
                        themekey,
                        parentkeywordsRowBykeywords_theme[0]};
                this.Rows.Add(rowthemeRow);
                return rowthemeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                themeDataTable cln = ((themeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new themeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnthemekt = base.Columns["themekt"];
                this.columnthemekey = base.Columns["themekey"];
                this.columnkeywords_Id = base.Columns["keywords_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnthemekt = new System.Data.DataColumn("themekt", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnthemekt);
                this.columnthemekey = new System.Data.DataColumn("themekey", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnthemekey);
                this.columnkeywords_Id = new System.Data.DataColumn("keywords_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnkeywords_Id);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public themeRow NewthemeRow() {
                return ((themeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new themeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(themeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.themeRowChanged != null)) {
                    this.themeRowChanged(this, new themeRowChangeEvent(((themeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.themeRowChanging != null)) {
                    this.themeRowChanging(this, new themeRowChangeEvent(((themeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.themeRowDeleted != null)) {
                    this.themeRowDeleted(this, new themeRowChangeEvent(((themeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.themeRowDeleting != null)) {
                    this.themeRowDeleting(this, new themeRowChangeEvent(((themeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovethemeRow(themeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                metadata ds = new metadata();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "themeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class distinfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnresdesc;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public distinfoDataTable() {
                this.TableName = "distinfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal distinfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected distinfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn resdescColumn {
                get {
                    return this.columnresdesc;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public distinfoRow this[int index] {
                get {
                    return ((distinfoRow)(this.Rows[index]));
                }
            }
            
            public event distinfoRowChangeEventHandler distinfoRowChanging;
            
            public event distinfoRowChangeEventHandler distinfoRowChanged;
            
            public event distinfoRowChangeEventHandler distinfoRowDeleting;
            
            public event distinfoRowChangeEventHandler distinfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddistinfoRow(distinfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public distinfoRow AdddistinfoRow(string resdesc) {
                distinfoRow rowdistinfoRow = ((distinfoRow)(this.NewRow()));
                rowdistinfoRow.ItemArray = new object[] {
                        resdesc};
                this.Rows.Add(rowdistinfoRow);
                return rowdistinfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                distinfoDataTable cln = ((distinfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new distinfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnresdesc = base.Columns["resdesc"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnresdesc = new System.Data.DataColumn("resdesc", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnresdesc);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public distinfoRow NewdistinfoRow() {
                return ((distinfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new distinfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(distinfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.distinfoRowChanged != null)) {
                    this.distinfoRowChanged(this, new distinfoRowChangeEvent(((distinfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.distinfoRowChanging != null)) {
                    this.distinfoRowChanging(this, new distinfoRowChangeEvent(((distinfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.distinfoRowDeleted != null)) {
                    this.distinfoRowDeleted(this, new distinfoRowChangeEvent(((distinfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.distinfoRowDeleting != null)) {
                    this.distinfoRowDeleting(this, new distinfoRowChangeEvent(((distinfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedistinfoRow(distinfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                metadata ds = new metadata();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "distinfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class metainfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnmetd;
            
            private System.Data.DataColumn columnmetstdn;
            
            private System.Data.DataColumn columnmetstdv;
            
            private System.Data.DataColumn columnmettc;
            
            private System.Data.DataColumn columnmetainfo_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metainfoDataTable() {
                this.TableName = "metainfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal metainfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected metainfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn metdColumn {
                get {
                    return this.columnmetd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn metstdnColumn {
                get {
                    return this.columnmetstdn;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn metstdvColumn {
                get {
                    return this.columnmetstdv;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn mettcColumn {
                get {
                    return this.columnmettc;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn metainfo_IdColumn {
                get {
                    return this.columnmetainfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metainfoRow this[int index] {
                get {
                    return ((metainfoRow)(this.Rows[index]));
                }
            }
            
            public event metainfoRowChangeEventHandler metainfoRowChanging;
            
            public event metainfoRowChangeEventHandler metainfoRowChanged;
            
            public event metainfoRowChangeEventHandler metainfoRowDeleting;
            
            public event metainfoRowChangeEventHandler metainfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddmetainfoRow(metainfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metainfoRow AddmetainfoRow(string metd, string metstdn, string metstdv, string mettc) {
                metainfoRow rowmetainfoRow = ((metainfoRow)(this.NewRow()));
                rowmetainfoRow.ItemArray = new object[] {
                        metd,
                        metstdn,
                        metstdv,
                        mettc,
                        null};
                this.Rows.Add(rowmetainfoRow);
                return rowmetainfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                metainfoDataTable cln = ((metainfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new metainfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmetd = base.Columns["metd"];
                this.columnmetstdn = base.Columns["metstdn"];
                this.columnmetstdv = base.Columns["metstdv"];
                this.columnmettc = base.Columns["mettc"];
                this.columnmetainfo_Id = base.Columns["metainfo_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmetd = new System.Data.DataColumn("metd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmetd);
                this.columnmetstdn = new System.Data.DataColumn("metstdn", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmetstdn);
                this.columnmetstdv = new System.Data.DataColumn("metstdv", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmetstdv);
                this.columnmettc = new System.Data.DataColumn("mettc", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmettc);
                this.columnmetainfo_Id = new System.Data.DataColumn("metainfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmetainfo_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnmetainfo_Id}, true));
                this.columnmetainfo_Id.AutoIncrement = true;
                this.columnmetainfo_Id.AllowDBNull = false;
                this.columnmetainfo_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metainfoRow NewmetainfoRow() {
                return ((metainfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new metainfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(metainfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.metainfoRowChanged != null)) {
                    this.metainfoRowChanged(this, new metainfoRowChangeEvent(((metainfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.metainfoRowChanging != null)) {
                    this.metainfoRowChanging(this, new metainfoRowChangeEvent(((metainfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.metainfoRowDeleted != null)) {
                    this.metainfoRowDeleted(this, new metainfoRowChangeEvent(((metainfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.metainfoRowDeleting != null)) {
                    this.metainfoRowDeleting(this, new metainfoRowChangeEvent(((metainfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovemetainfoRow(metainfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                metadata ds = new metadata();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "metainfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class metcDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnmetc_Id;
            
            private System.Data.DataColumn columnmetainfo_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metcDataTable() {
                this.TableName = "metc";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal metcDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected metcDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn metc_IdColumn {
                get {
                    return this.columnmetc_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn metainfo_IdColumn {
                get {
                    return this.columnmetainfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metcRow this[int index] {
                get {
                    return ((metcRow)(this.Rows[index]));
                }
            }
            
            public event metcRowChangeEventHandler metcRowChanging;
            
            public event metcRowChangeEventHandler metcRowChanged;
            
            public event metcRowChangeEventHandler metcRowDeleting;
            
            public event metcRowChangeEventHandler metcRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddmetcRow(metcRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metcRow AddmetcRow(metainfoRow parentmetainfoRowBymetainfo_metc) {
                metcRow rowmetcRow = ((metcRow)(this.NewRow()));
                rowmetcRow.ItemArray = new object[] {
                        null,
                        parentmetainfoRowBymetainfo_metc[4]};
                this.Rows.Add(rowmetcRow);
                return rowmetcRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                metcDataTable cln = ((metcDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new metcDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmetc_Id = base.Columns["metc_Id"];
                this.columnmetainfo_Id = base.Columns["metainfo_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmetc_Id = new System.Data.DataColumn("metc_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmetc_Id);
                this.columnmetainfo_Id = new System.Data.DataColumn("metainfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmetainfo_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnmetc_Id}, true));
                this.columnmetc_Id.AutoIncrement = true;
                this.columnmetc_Id.AllowDBNull = false;
                this.columnmetc_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metcRow NewmetcRow() {
                return ((metcRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new metcRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(metcRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.metcRowChanged != null)) {
                    this.metcRowChanged(this, new metcRowChangeEvent(((metcRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.metcRowChanging != null)) {
                    this.metcRowChanging(this, new metcRowChangeEvent(((metcRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.metcRowDeleted != null)) {
                    this.metcRowDeleted(this, new metcRowChangeEvent(((metcRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.metcRowDeleting != null)) {
                    this.metcRowDeleting(this, new metcRowChangeEvent(((metcRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovemetcRow(metcRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                metadata ds = new metadata();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "metcDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class cntinfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columncntvoice;
            
            private System.Data.DataColumn columncntinfo_Id;
            
            private System.Data.DataColumn columnmetc_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cntinfoDataTable() {
                this.TableName = "cntinfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal cntinfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected cntinfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cntvoiceColumn {
                get {
                    return this.columncntvoice;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cntinfo_IdColumn {
                get {
                    return this.columncntinfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn metc_IdColumn {
                get {
                    return this.columnmetc_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cntinfoRow this[int index] {
                get {
                    return ((cntinfoRow)(this.Rows[index]));
                }
            }
            
            public event cntinfoRowChangeEventHandler cntinfoRowChanging;
            
            public event cntinfoRowChangeEventHandler cntinfoRowChanged;
            
            public event cntinfoRowChangeEventHandler cntinfoRowDeleting;
            
            public event cntinfoRowChangeEventHandler cntinfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcntinfoRow(cntinfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cntinfoRow AddcntinfoRow(string cntvoice, metcRow parentmetcRowBymetc_cntinfo) {
                cntinfoRow rowcntinfoRow = ((cntinfoRow)(this.NewRow()));
                rowcntinfoRow.ItemArray = new object[] {
                        cntvoice,
                        null,
                        parentmetcRowBymetc_cntinfo[0]};
                this.Rows.Add(rowcntinfoRow);
                return rowcntinfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                cntinfoDataTable cln = ((cntinfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new cntinfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncntvoice = base.Columns["cntvoice"];
                this.columncntinfo_Id = base.Columns["cntinfo_Id"];
                this.columnmetc_Id = base.Columns["metc_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncntvoice = new System.Data.DataColumn("cntvoice", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncntvoice);
                this.columncntinfo_Id = new System.Data.DataColumn("cntinfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncntinfo_Id);
                this.columnmetc_Id = new System.Data.DataColumn("metc_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmetc_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columncntinfo_Id}, true));
                this.columncntinfo_Id.AutoIncrement = true;
                this.columncntinfo_Id.AllowDBNull = false;
                this.columncntinfo_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cntinfoRow NewcntinfoRow() {
                return ((cntinfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new cntinfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(cntinfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.cntinfoRowChanged != null)) {
                    this.cntinfoRowChanged(this, new cntinfoRowChangeEvent(((cntinfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.cntinfoRowChanging != null)) {
                    this.cntinfoRowChanging(this, new cntinfoRowChangeEvent(((cntinfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.cntinfoRowDeleted != null)) {
                    this.cntinfoRowDeleted(this, new cntinfoRowChangeEvent(((cntinfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.cntinfoRowDeleting != null)) {
                    this.cntinfoRowDeleting(this, new cntinfoRowChangeEvent(((cntinfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecntinfoRow(cntinfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                metadata ds = new metadata();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "cntinfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class cntorgpDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columncntorg;
            
            private System.Data.DataColumn columncntper;
            
            private System.Data.DataColumn columncntinfo_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cntorgpDataTable() {
                this.TableName = "cntorgp";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal cntorgpDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected cntorgpDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cntorgColumn {
                get {
                    return this.columncntorg;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cntperColumn {
                get {
                    return this.columncntper;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cntinfo_IdColumn {
                get {
                    return this.columncntinfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cntorgpRow this[int index] {
                get {
                    return ((cntorgpRow)(this.Rows[index]));
                }
            }
            
            public event cntorgpRowChangeEventHandler cntorgpRowChanging;
            
            public event cntorgpRowChangeEventHandler cntorgpRowChanged;
            
            public event cntorgpRowChangeEventHandler cntorgpRowDeleting;
            
            public event cntorgpRowChangeEventHandler cntorgpRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcntorgpRow(cntorgpRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cntorgpRow AddcntorgpRow(string cntorg, string cntper, cntinfoRow parentcntinfoRowBycntinfo_cntorgp) {
                cntorgpRow rowcntorgpRow = ((cntorgpRow)(this.NewRow()));
                rowcntorgpRow.ItemArray = new object[] {
                        cntorg,
                        cntper,
                        parentcntinfoRowBycntinfo_cntorgp[1]};
                this.Rows.Add(rowcntorgpRow);
                return rowcntorgpRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                cntorgpDataTable cln = ((cntorgpDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new cntorgpDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncntorg = base.Columns["cntorg"];
                this.columncntper = base.Columns["cntper"];
                this.columncntinfo_Id = base.Columns["cntinfo_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncntorg = new System.Data.DataColumn("cntorg", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncntorg);
                this.columncntper = new System.Data.DataColumn("cntper", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncntper);
                this.columncntinfo_Id = new System.Data.DataColumn("cntinfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncntinfo_Id);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cntorgpRow NewcntorgpRow() {
                return ((cntorgpRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new cntorgpRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(cntorgpRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.cntorgpRowChanged != null)) {
                    this.cntorgpRowChanged(this, new cntorgpRowChangeEvent(((cntorgpRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.cntorgpRowChanging != null)) {
                    this.cntorgpRowChanging(this, new cntorgpRowChangeEvent(((cntorgpRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.cntorgpRowDeleted != null)) {
                    this.cntorgpRowDeleted(this, new cntorgpRowChangeEvent(((cntorgpRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.cntorgpRowDeleting != null)) {
                    this.cntorgpRowDeleting(this, new cntorgpRowChangeEvent(((cntorgpRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecntorgpRow(cntorgpRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                metadata ds = new metadata();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "cntorgpDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class cntaddrDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnaddrtype;
            
            private System.Data.DataColumn columncity;
            
            private System.Data.DataColumn columnstate;
            
            private System.Data.DataColumn columnpostal;
            
            private System.Data.DataColumn columncntinfo_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cntaddrDataTable() {
                this.TableName = "cntaddr";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal cntaddrDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected cntaddrDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn addrtypeColumn {
                get {
                    return this.columnaddrtype;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cityColumn {
                get {
                    return this.columncity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn stateColumn {
                get {
                    return this.columnstate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn postalColumn {
                get {
                    return this.columnpostal;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cntinfo_IdColumn {
                get {
                    return this.columncntinfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cntaddrRow this[int index] {
                get {
                    return ((cntaddrRow)(this.Rows[index]));
                }
            }
            
            public event cntaddrRowChangeEventHandler cntaddrRowChanging;
            
            public event cntaddrRowChangeEventHandler cntaddrRowChanged;
            
            public event cntaddrRowChangeEventHandler cntaddrRowDeleting;
            
            public event cntaddrRowChangeEventHandler cntaddrRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcntaddrRow(cntaddrRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cntaddrRow AddcntaddrRow(string addrtype, string city, string state, string postal, cntinfoRow parentcntinfoRowBycntinfo_cntaddr) {
                cntaddrRow rowcntaddrRow = ((cntaddrRow)(this.NewRow()));
                rowcntaddrRow.ItemArray = new object[] {
                        addrtype,
                        city,
                        state,
                        postal,
                        parentcntinfoRowBycntinfo_cntaddr[1]};
                this.Rows.Add(rowcntaddrRow);
                return rowcntaddrRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                cntaddrDataTable cln = ((cntaddrDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new cntaddrDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnaddrtype = base.Columns["addrtype"];
                this.columncity = base.Columns["city"];
                this.columnstate = base.Columns["state"];
                this.columnpostal = base.Columns["postal"];
                this.columncntinfo_Id = base.Columns["cntinfo_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnaddrtype = new System.Data.DataColumn("addrtype", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnaddrtype);
                this.columncity = new System.Data.DataColumn("city", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncity);
                this.columnstate = new System.Data.DataColumn("state", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstate);
                this.columnpostal = new System.Data.DataColumn("postal", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpostal);
                this.columncntinfo_Id = new System.Data.DataColumn("cntinfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncntinfo_Id);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cntaddrRow NewcntaddrRow() {
                return ((cntaddrRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new cntaddrRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(cntaddrRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.cntaddrRowChanged != null)) {
                    this.cntaddrRowChanged(this, new cntaddrRowChangeEvent(((cntaddrRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.cntaddrRowChanging != null)) {
                    this.cntaddrRowChanging(this, new cntaddrRowChangeEvent(((cntaddrRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.cntaddrRowDeleted != null)) {
                    this.cntaddrRowDeleted(this, new cntaddrRowChangeEvent(((cntaddrRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.cntaddrRowDeleting != null)) {
                    this.cntaddrRowDeleting(this, new cntaddrRowChangeEvent(((cntaddrRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecntaddrRow(cntaddrRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                metadata ds = new metadata();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "cntaddrDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class metextnsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnonlink;
            
            private System.Data.DataColumn columnmetprof;
            
            private System.Data.DataColumn columnmetainfo_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metextnsDataTable() {
                this.TableName = "metextns";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal metextnsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected metextnsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn onlinkColumn {
                get {
                    return this.columnonlink;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn metprofColumn {
                get {
                    return this.columnmetprof;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn metainfo_IdColumn {
                get {
                    return this.columnmetainfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metextnsRow this[int index] {
                get {
                    return ((metextnsRow)(this.Rows[index]));
                }
            }
            
            public event metextnsRowChangeEventHandler metextnsRowChanging;
            
            public event metextnsRowChangeEventHandler metextnsRowChanged;
            
            public event metextnsRowChangeEventHandler metextnsRowDeleting;
            
            public event metextnsRowChangeEventHandler metextnsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddmetextnsRow(metextnsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metextnsRow AddmetextnsRow(string onlink, string metprof, metainfoRow parentmetainfoRowBymetainfo_metextns) {
                metextnsRow rowmetextnsRow = ((metextnsRow)(this.NewRow()));
                rowmetextnsRow.ItemArray = new object[] {
                        onlink,
                        metprof,
                        parentmetainfoRowBymetainfo_metextns[4]};
                this.Rows.Add(rowmetextnsRow);
                return rowmetextnsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                metextnsDataTable cln = ((metextnsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new metextnsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnonlink = base.Columns["onlink"];
                this.columnmetprof = base.Columns["metprof"];
                this.columnmetainfo_Id = base.Columns["metainfo_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnonlink = new System.Data.DataColumn("onlink", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnonlink);
                this.columnmetprof = new System.Data.DataColumn("metprof", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmetprof);
                this.columnmetainfo_Id = new System.Data.DataColumn("metainfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmetainfo_Id);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metextnsRow NewmetextnsRow() {
                return ((metextnsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new metextnsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(metextnsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.metextnsRowChanged != null)) {
                    this.metextnsRowChanged(this, new metextnsRowChangeEvent(((metextnsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.metextnsRowChanging != null)) {
                    this.metextnsRowChanging(this, new metextnsRowChangeEvent(((metextnsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.metextnsRowDeleted != null)) {
                    this.metextnsRowDeleted(this, new metextnsRowChangeEvent(((metextnsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.metextnsRowDeleting != null)) {
                    this.metextnsRowDeleting(this, new metextnsRowChangeEvent(((metextnsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovemetextnsRow(metextnsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                metadata ds = new metadata();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "metextnsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class idinfoRow : System.Data.DataRow {
            
            private idinfoDataTable tableidinfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal idinfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableidinfo = ((idinfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string accconst {
                get {
                    try {
                        return ((string)(this[this.tableidinfo.accconstColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'accconst\' in table \'idinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableidinfo.accconstColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string useconst {
                get {
                    try {
                        return ((string)(this[this.tableidinfo.useconstColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'useconst\' in table \'idinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableidinfo.useconstColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string native {
                get {
                    try {
                        return ((string)(this[this.tableidinfo.nativeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'native\' in table \'idinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableidinfo.nativeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idinfo_Id {
                get {
                    return ((int)(this[this.tableidinfo.idinfo_IdColumn]));
                }
                set {
                    this[this.tableidinfo.idinfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaccconstNull() {
                return this.IsNull(this.tableidinfo.accconstColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaccconstNull() {
                this[this.tableidinfo.accconstColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuseconstNull() {
                return this.IsNull(this.tableidinfo.useconstColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuseconstNull() {
                this[this.tableidinfo.useconstColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnativeNull() {
                return this.IsNull(this.tableidinfo.nativeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnativeNull() {
                this[this.tableidinfo.nativeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public citationRow[] GetcitationRows() {
                return ((citationRow[])(base.GetChildRows(this.Table.ChildRelations["idinfo_citation"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descriptRow[] GetdescriptRows() {
                return ((descriptRow[])(base.GetChildRows(this.Table.ChildRelations["idinfo_descript"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public timeperdRow[] GettimeperdRows() {
                return ((timeperdRow[])(base.GetChildRows(this.Table.ChildRelations["idinfo_timeperd"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public statusRow[] GetstatusRows() {
                return ((statusRow[])(base.GetChildRows(this.Table.ChildRelations["idinfo_status"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spdomRow[] GetspdomRows() {
                return ((spdomRow[])(base.GetChildRows(this.Table.ChildRelations["idinfo_spdom"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public keywordsRow[] GetkeywordsRows() {
                return ((keywordsRow[])(base.GetChildRows(this.Table.ChildRelations["idinfo_keywords"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class citationRow : System.Data.DataRow {
            
            private citationDataTable tablecitation;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal citationRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecitation = ((citationDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int citation_Id {
                get {
                    return ((int)(this[this.tablecitation.citation_IdColumn]));
                }
                set {
                    this[this.tablecitation.citation_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idinfo_Id {
                get {
                    try {
                        return ((int)(this[this.tablecitation.idinfo_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'idinfo_Id\' in table \'citation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecitation.idinfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public idinfoRow idinfoRow {
                get {
                    return ((idinfoRow)(this.GetParentRow(this.Table.ParentRelations["idinfo_citation"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["idinfo_citation"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isidinfo_IdNull() {
                return this.IsNull(this.tablecitation.idinfo_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setidinfo_IdNull() {
                this[this.tablecitation.idinfo_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public citeinfoRow[] GetciteinfoRows() {
                return ((citeinfoRow[])(base.GetChildRows(this.Table.ChildRelations["citation_citeinfo"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class citeinfoRow : System.Data.DataRow {
            
            private citeinfoDataTable tableciteinfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal citeinfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableciteinfo = ((citeinfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string origin {
                get {
                    try {
                        return ((string)(this[this.tableciteinfo.originColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'origin\' in table \'citeinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableciteinfo.originColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pubdate {
                get {
                    try {
                        return ((string)(this[this.tableciteinfo.pubdateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'pubdate\' in table \'citeinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableciteinfo.pubdateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string title {
                get {
                    try {
                        return ((string)(this[this.tableciteinfo.titleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'title\' in table \'citeinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableciteinfo.titleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int citation_Id {
                get {
                    try {
                        return ((int)(this[this.tableciteinfo.citation_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'citation_Id\' in table \'citeinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableciteinfo.citation_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public citationRow citationRow {
                get {
                    return ((citationRow)(this.GetParentRow(this.Table.ParentRelations["citation_citeinfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["citation_citeinfo"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsoriginNull() {
                return this.IsNull(this.tableciteinfo.originColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetoriginNull() {
                this[this.tableciteinfo.originColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspubdateNull() {
                return this.IsNull(this.tableciteinfo.pubdateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpubdateNull() {
                this[this.tableciteinfo.pubdateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstitleNull() {
                return this.IsNull(this.tableciteinfo.titleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettitleNull() {
                this[this.tableciteinfo.titleColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscitation_IdNull() {
                return this.IsNull(this.tableciteinfo.citation_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcitation_IdNull() {
                this[this.tableciteinfo.citation_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class descriptRow : System.Data.DataRow {
            
            private descriptDataTable tabledescript;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal descriptRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledescript = ((descriptDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _abstract {
                get {
                    try {
                        return ((string)(this[this.tabledescript._abstractColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'abstract\' in table \'descript\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledescript._abstractColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string purpose {
                get {
                    try {
                        return ((string)(this[this.tabledescript.purposeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'purpose\' in table \'descript\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledescript.purposeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idinfo_Id {
                get {
                    try {
                        return ((int)(this[this.tabledescript.idinfo_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'idinfo_Id\' in table \'descript\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledescript.idinfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public idinfoRow idinfoRow {
                get {
                    return ((idinfoRow)(this.GetParentRow(this.Table.ParentRelations["idinfo_descript"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["idinfo_descript"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_abstractNull() {
                return this.IsNull(this.tabledescript._abstractColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_abstractNull() {
                this[this.tabledescript._abstractColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspurposeNull() {
                return this.IsNull(this.tabledescript.purposeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpurposeNull() {
                this[this.tabledescript.purposeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isidinfo_IdNull() {
                return this.IsNull(this.tabledescript.idinfo_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setidinfo_IdNull() {
                this[this.tabledescript.idinfo_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class timeperdRow : System.Data.DataRow {
            
            private timeperdDataTable tabletimeperd;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal timeperdRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletimeperd = ((timeperdDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string current {
                get {
                    try {
                        return ((string)(this[this.tabletimeperd.currentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'current\' in table \'timeperd\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletimeperd.currentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int timeperd_Id {
                get {
                    return ((int)(this[this.tabletimeperd.timeperd_IdColumn]));
                }
                set {
                    this[this.tabletimeperd.timeperd_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idinfo_Id {
                get {
                    try {
                        return ((int)(this[this.tabletimeperd.idinfo_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'idinfo_Id\' in table \'timeperd\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletimeperd.idinfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public idinfoRow idinfoRow {
                get {
                    return ((idinfoRow)(this.GetParentRow(this.Table.ParentRelations["idinfo_timeperd"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["idinfo_timeperd"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscurrentNull() {
                return this.IsNull(this.tabletimeperd.currentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcurrentNull() {
                this[this.tabletimeperd.currentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isidinfo_IdNull() {
                return this.IsNull(this.tabletimeperd.idinfo_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setidinfo_IdNull() {
                this[this.tabletimeperd.idinfo_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public timeinfoRow[] GettimeinfoRows() {
                return ((timeinfoRow[])(base.GetChildRows(this.Table.ChildRelations["timeperd_timeinfo"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class timeinfoRow : System.Data.DataRow {
            
            private timeinfoDataTable tabletimeinfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal timeinfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletimeinfo = ((timeinfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int timeinfo_Id {
                get {
                    return ((int)(this[this.tabletimeinfo.timeinfo_IdColumn]));
                }
                set {
                    this[this.tabletimeinfo.timeinfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int timeperd_Id {
                get {
                    try {
                        return ((int)(this[this.tabletimeinfo.timeperd_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'timeperd_Id\' in table \'timeinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletimeinfo.timeperd_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public timeperdRow timeperdRow {
                get {
                    return ((timeperdRow)(this.GetParentRow(this.Table.ParentRelations["timeperd_timeinfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["timeperd_timeinfo"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istimeperd_IdNull() {
                return this.IsNull(this.tabletimeinfo.timeperd_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settimeperd_IdNull() {
                this[this.tabletimeinfo.timeperd_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sngdateRow[] GetsngdateRows() {
                return ((sngdateRow[])(base.GetChildRows(this.Table.ChildRelations["timeinfo_sngdate"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class sngdateRow : System.Data.DataRow {
            
            private sngdateDataTable tablesngdate;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sngdateRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesngdate = ((sngdateDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string caldate {
                get {
                    try {
                        return ((string)(this[this.tablesngdate.caldateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'caldate\' in table \'sngdate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesngdate.caldateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int timeinfo_Id {
                get {
                    try {
                        return ((int)(this[this.tablesngdate.timeinfo_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'timeinfo_Id\' in table \'sngdate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesngdate.timeinfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public timeinfoRow timeinfoRow {
                get {
                    return ((timeinfoRow)(this.GetParentRow(this.Table.ParentRelations["timeinfo_sngdate"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["timeinfo_sngdate"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscaldateNull() {
                return this.IsNull(this.tablesngdate.caldateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcaldateNull() {
                this[this.tablesngdate.caldateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istimeinfo_IdNull() {
                return this.IsNull(this.tablesngdate.timeinfo_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settimeinfo_IdNull() {
                this[this.tablesngdate.timeinfo_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class statusRow : System.Data.DataRow {
            
            private statusDataTable tablestatus;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal statusRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablestatus = ((statusDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string progress {
                get {
                    try {
                        return ((string)(this[this.tablestatus.progressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'progress\' in table \'status\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestatus.progressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string update {
                get {
                    try {
                        return ((string)(this[this.tablestatus.updateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'update\' in table \'status\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestatus.updateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idinfo_Id {
                get {
                    try {
                        return ((int)(this[this.tablestatus.idinfo_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'idinfo_Id\' in table \'status\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestatus.idinfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public idinfoRow idinfoRow {
                get {
                    return ((idinfoRow)(this.GetParentRow(this.Table.ParentRelations["idinfo_status"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["idinfo_status"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprogressNull() {
                return this.IsNull(this.tablestatus.progressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprogressNull() {
                this[this.tablestatus.progressColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsupdateNull() {
                return this.IsNull(this.tablestatus.updateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetupdateNull() {
                this[this.tablestatus.updateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isidinfo_IdNull() {
                return this.IsNull(this.tablestatus.idinfo_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setidinfo_IdNull() {
                this[this.tablestatus.idinfo_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class spdomRow : System.Data.DataRow {
            
            private spdomDataTable tablespdom;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal spdomRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablespdom = ((spdomDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int spdom_Id {
                get {
                    return ((int)(this[this.tablespdom.spdom_IdColumn]));
                }
                set {
                    this[this.tablespdom.spdom_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idinfo_Id {
                get {
                    try {
                        return ((int)(this[this.tablespdom.idinfo_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'idinfo_Id\' in table \'spdom\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespdom.idinfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public idinfoRow idinfoRow {
                get {
                    return ((idinfoRow)(this.GetParentRow(this.Table.ParentRelations["idinfo_spdom"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["idinfo_spdom"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isidinfo_IdNull() {
                return this.IsNull(this.tablespdom.idinfo_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setidinfo_IdNull() {
                this[this.tablespdom.idinfo_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public boundingRow[] GetboundingRows() {
                return ((boundingRow[])(base.GetChildRows(this.Table.ChildRelations["spdom_bounding"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class boundingRow : System.Data.DataRow {
            
            private boundingDataTable tablebounding;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal boundingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablebounding = ((boundingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string westbc {
                get {
                    try {
                        return ((string)(this[this.tablebounding.westbcColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'westbc\' in table \'bounding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebounding.westbcColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string eastbc {
                get {
                    try {
                        return ((string)(this[this.tablebounding.eastbcColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'eastbc\' in table \'bounding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebounding.eastbcColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string northbc {
                get {
                    try {
                        return ((string)(this[this.tablebounding.northbcColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'northbc\' in table \'bounding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebounding.northbcColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string southbc {
                get {
                    try {
                        return ((string)(this[this.tablebounding.southbcColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'southbc\' in table \'bounding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebounding.southbcColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int spdom_Id {
                get {
                    try {
                        return ((int)(this[this.tablebounding.spdom_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'spdom_Id\' in table \'bounding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebounding.spdom_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spdomRow spdomRow {
                get {
                    return ((spdomRow)(this.GetParentRow(this.Table.ParentRelations["spdom_bounding"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["spdom_bounding"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IswestbcNull() {
                return this.IsNull(this.tablebounding.westbcColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetwestbcNull() {
                this[this.tablebounding.westbcColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IseastbcNull() {
                return this.IsNull(this.tablebounding.eastbcColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeteastbcNull() {
                this[this.tablebounding.eastbcColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnorthbcNull() {
                return this.IsNull(this.tablebounding.northbcColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnorthbcNull() {
                this[this.tablebounding.northbcColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssouthbcNull() {
                return this.IsNull(this.tablebounding.southbcColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsouthbcNull() {
                this[this.tablebounding.southbcColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isspdom_IdNull() {
                return this.IsNull(this.tablebounding.spdom_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setspdom_IdNull() {
                this[this.tablebounding.spdom_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class keywordsRow : System.Data.DataRow {
            
            private keywordsDataTable tablekeywords;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal keywordsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablekeywords = ((keywordsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int keywords_Id {
                get {
                    return ((int)(this[this.tablekeywords.keywords_IdColumn]));
                }
                set {
                    this[this.tablekeywords.keywords_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idinfo_Id {
                get {
                    try {
                        return ((int)(this[this.tablekeywords.idinfo_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'idinfo_Id\' in table \'keywords\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablekeywords.idinfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public idinfoRow idinfoRow {
                get {
                    return ((idinfoRow)(this.GetParentRow(this.Table.ParentRelations["idinfo_keywords"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["idinfo_keywords"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isidinfo_IdNull() {
                return this.IsNull(this.tablekeywords.idinfo_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setidinfo_IdNull() {
                this[this.tablekeywords.idinfo_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public themeRow[] GetthemeRows() {
                return ((themeRow[])(base.GetChildRows(this.Table.ChildRelations["keywords_theme"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class themeRow : System.Data.DataRow {
            
            private themeDataTable tabletheme;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal themeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletheme = ((themeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string themekt {
                get {
                    try {
                        return ((string)(this[this.tabletheme.themektColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'themekt\' in table \'theme\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletheme.themektColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string themekey {
                get {
                    try {
                        return ((string)(this[this.tabletheme.themekeyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'themekey\' in table \'theme\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletheme.themekeyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int keywords_Id {
                get {
                    try {
                        return ((int)(this[this.tabletheme.keywords_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'keywords_Id\' in table \'theme\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletheme.keywords_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public keywordsRow keywordsRow {
                get {
                    return ((keywordsRow)(this.GetParentRow(this.Table.ParentRelations["keywords_theme"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["keywords_theme"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsthemektNull() {
                return this.IsNull(this.tabletheme.themektColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetthemektNull() {
                this[this.tabletheme.themektColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsthemekeyNull() {
                return this.IsNull(this.tabletheme.themekeyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetthemekeyNull() {
                this[this.tabletheme.themekeyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iskeywords_IdNull() {
                return this.IsNull(this.tabletheme.keywords_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setkeywords_IdNull() {
                this[this.tabletheme.keywords_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class distinfoRow : System.Data.DataRow {
            
            private distinfoDataTable tabledistinfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal distinfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledistinfo = ((distinfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string resdesc {
                get {
                    try {
                        return ((string)(this[this.tabledistinfo.resdescColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'resdesc\' in table \'distinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledistinfo.resdescColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsresdescNull() {
                return this.IsNull(this.tabledistinfo.resdescColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetresdescNull() {
                this[this.tabledistinfo.resdescColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class metainfoRow : System.Data.DataRow {
            
            private metainfoDataTable tablemetainfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal metainfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablemetainfo = ((metainfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string metd {
                get {
                    try {
                        return ((string)(this[this.tablemetainfo.metdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'metd\' in table \'metainfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemetainfo.metdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string metstdn {
                get {
                    try {
                        return ((string)(this[this.tablemetainfo.metstdnColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'metstdn\' in table \'metainfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemetainfo.metstdnColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string metstdv {
                get {
                    try {
                        return ((string)(this[this.tablemetainfo.metstdvColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'metstdv\' in table \'metainfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemetainfo.metstdvColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string mettc {
                get {
                    try {
                        return ((string)(this[this.tablemetainfo.mettcColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'mettc\' in table \'metainfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemetainfo.mettcColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int metainfo_Id {
                get {
                    return ((int)(this[this.tablemetainfo.metainfo_IdColumn]));
                }
                set {
                    this[this.tablemetainfo.metainfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmetdNull() {
                return this.IsNull(this.tablemetainfo.metdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmetdNull() {
                this[this.tablemetainfo.metdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmetstdnNull() {
                return this.IsNull(this.tablemetainfo.metstdnColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmetstdnNull() {
                this[this.tablemetainfo.metstdnColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmetstdvNull() {
                return this.IsNull(this.tablemetainfo.metstdvColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmetstdvNull() {
                this[this.tablemetainfo.metstdvColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmettcNull() {
                return this.IsNull(this.tablemetainfo.mettcColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmettcNull() {
                this[this.tablemetainfo.mettcColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metcRow[] GetmetcRows() {
                return ((metcRow[])(base.GetChildRows(this.Table.ChildRelations["metainfo_metc"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metextnsRow[] GetmetextnsRows() {
                return ((metextnsRow[])(base.GetChildRows(this.Table.ChildRelations["metainfo_metextns"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class metcRow : System.Data.DataRow {
            
            private metcDataTable tablemetc;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal metcRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablemetc = ((metcDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int metc_Id {
                get {
                    return ((int)(this[this.tablemetc.metc_IdColumn]));
                }
                set {
                    this[this.tablemetc.metc_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int metainfo_Id {
                get {
                    try {
                        return ((int)(this[this.tablemetc.metainfo_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'metainfo_Id\' in table \'metc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemetc.metainfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metainfoRow metainfoRow {
                get {
                    return ((metainfoRow)(this.GetParentRow(this.Table.ParentRelations["metainfo_metc"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["metainfo_metc"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismetainfo_IdNull() {
                return this.IsNull(this.tablemetc.metainfo_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmetainfo_IdNull() {
                this[this.tablemetc.metainfo_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cntinfoRow[] GetcntinfoRows() {
                return ((cntinfoRow[])(base.GetChildRows(this.Table.ChildRelations["metc_cntinfo"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class cntinfoRow : System.Data.DataRow {
            
            private cntinfoDataTable tablecntinfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal cntinfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecntinfo = ((cntinfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cntvoice {
                get {
                    try {
                        return ((string)(this[this.tablecntinfo.cntvoiceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'cntvoice\' in table \'cntinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecntinfo.cntvoiceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int cntinfo_Id {
                get {
                    return ((int)(this[this.tablecntinfo.cntinfo_IdColumn]));
                }
                set {
                    this[this.tablecntinfo.cntinfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int metc_Id {
                get {
                    try {
                        return ((int)(this[this.tablecntinfo.metc_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'metc_Id\' in table \'cntinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecntinfo.metc_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metcRow metcRow {
                get {
                    return ((metcRow)(this.GetParentRow(this.Table.ParentRelations["metc_cntinfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["metc_cntinfo"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscntvoiceNull() {
                return this.IsNull(this.tablecntinfo.cntvoiceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcntvoiceNull() {
                this[this.tablecntinfo.cntvoiceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismetc_IdNull() {
                return this.IsNull(this.tablecntinfo.metc_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmetc_IdNull() {
                this[this.tablecntinfo.metc_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cntorgpRow[] GetcntorgpRows() {
                return ((cntorgpRow[])(base.GetChildRows(this.Table.ChildRelations["cntinfo_cntorgp"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cntaddrRow[] GetcntaddrRows() {
                return ((cntaddrRow[])(base.GetChildRows(this.Table.ChildRelations["cntinfo_cntaddr"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class cntorgpRow : System.Data.DataRow {
            
            private cntorgpDataTable tablecntorgp;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal cntorgpRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecntorgp = ((cntorgpDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cntorg {
                get {
                    try {
                        return ((string)(this[this.tablecntorgp.cntorgColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'cntorg\' in table \'cntorgp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecntorgp.cntorgColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cntper {
                get {
                    try {
                        return ((string)(this[this.tablecntorgp.cntperColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'cntper\' in table \'cntorgp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecntorgp.cntperColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int cntinfo_Id {
                get {
                    try {
                        return ((int)(this[this.tablecntorgp.cntinfo_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'cntinfo_Id\' in table \'cntorgp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecntorgp.cntinfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cntinfoRow cntinfoRow {
                get {
                    return ((cntinfoRow)(this.GetParentRow(this.Table.ParentRelations["cntinfo_cntorgp"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["cntinfo_cntorgp"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscntorgNull() {
                return this.IsNull(this.tablecntorgp.cntorgColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcntorgNull() {
                this[this.tablecntorgp.cntorgColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscntperNull() {
                return this.IsNull(this.tablecntorgp.cntperColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcntperNull() {
                this[this.tablecntorgp.cntperColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscntinfo_IdNull() {
                return this.IsNull(this.tablecntorgp.cntinfo_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcntinfo_IdNull() {
                this[this.tablecntorgp.cntinfo_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class cntaddrRow : System.Data.DataRow {
            
            private cntaddrDataTable tablecntaddr;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal cntaddrRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecntaddr = ((cntaddrDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string addrtype {
                get {
                    try {
                        return ((string)(this[this.tablecntaddr.addrtypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'addrtype\' in table \'cntaddr\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecntaddr.addrtypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string city {
                get {
                    try {
                        return ((string)(this[this.tablecntaddr.cityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'city\' in table \'cntaddr\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecntaddr.cityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string state {
                get {
                    try {
                        return ((string)(this[this.tablecntaddr.stateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'state\' in table \'cntaddr\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecntaddr.stateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string postal {
                get {
                    try {
                        return ((string)(this[this.tablecntaddr.postalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'postal\' in table \'cntaddr\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecntaddr.postalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int cntinfo_Id {
                get {
                    try {
                        return ((int)(this[this.tablecntaddr.cntinfo_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'cntinfo_Id\' in table \'cntaddr\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecntaddr.cntinfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cntinfoRow cntinfoRow {
                get {
                    return ((cntinfoRow)(this.GetParentRow(this.Table.ParentRelations["cntinfo_cntaddr"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["cntinfo_cntaddr"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaddrtypeNull() {
                return this.IsNull(this.tablecntaddr.addrtypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaddrtypeNull() {
                this[this.tablecntaddr.addrtypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscityNull() {
                return this.IsNull(this.tablecntaddr.cityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcityNull() {
                this[this.tablecntaddr.cityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstateNull() {
                return this.IsNull(this.tablecntaddr.stateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstateNull() {
                this[this.tablecntaddr.stateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspostalNull() {
                return this.IsNull(this.tablecntaddr.postalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpostalNull() {
                this[this.tablecntaddr.postalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscntinfo_IdNull() {
                return this.IsNull(this.tablecntaddr.cntinfo_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcntinfo_IdNull() {
                this[this.tablecntaddr.cntinfo_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class metextnsRow : System.Data.DataRow {
            
            private metextnsDataTable tablemetextns;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal metextnsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablemetextns = ((metextnsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string onlink {
                get {
                    try {
                        return ((string)(this[this.tablemetextns.onlinkColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'onlink\' in table \'metextns\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemetextns.onlinkColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string metprof {
                get {
                    try {
                        return ((string)(this[this.tablemetextns.metprofColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'metprof\' in table \'metextns\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemetextns.metprofColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int metainfo_Id {
                get {
                    try {
                        return ((int)(this[this.tablemetextns.metainfo_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'metainfo_Id\' in table \'metextns\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemetextns.metainfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metainfoRow metainfoRow {
                get {
                    return ((metainfoRow)(this.GetParentRow(this.Table.ParentRelations["metainfo_metextns"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["metainfo_metextns"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsonlinkNull() {
                return this.IsNull(this.tablemetextns.onlinkColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetonlinkNull() {
                this[this.tablemetextns.onlinkColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmetprofNull() {
                return this.IsNull(this.tablemetextns.metprofColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmetprofNull() {
                this[this.tablemetextns.metprofColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismetainfo_IdNull() {
                return this.IsNull(this.tablemetextns.metainfo_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmetainfo_IdNull() {
                this[this.tablemetextns.metainfo_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class idinfoRowChangeEvent : System.EventArgs {
            
            private idinfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public idinfoRowChangeEvent(idinfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public idinfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class citationRowChangeEvent : System.EventArgs {
            
            private citationRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public citationRowChangeEvent(citationRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public citationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class citeinfoRowChangeEvent : System.EventArgs {
            
            private citeinfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public citeinfoRowChangeEvent(citeinfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public citeinfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class descriptRowChangeEvent : System.EventArgs {
            
            private descriptRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descriptRowChangeEvent(descriptRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descriptRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class timeperdRowChangeEvent : System.EventArgs {
            
            private timeperdRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public timeperdRowChangeEvent(timeperdRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public timeperdRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class timeinfoRowChangeEvent : System.EventArgs {
            
            private timeinfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public timeinfoRowChangeEvent(timeinfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public timeinfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class sngdateRowChangeEvent : System.EventArgs {
            
            private sngdateRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sngdateRowChangeEvent(sngdateRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sngdateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class statusRowChangeEvent : System.EventArgs {
            
            private statusRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public statusRowChangeEvent(statusRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public statusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class spdomRowChangeEvent : System.EventArgs {
            
            private spdomRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spdomRowChangeEvent(spdomRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spdomRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class boundingRowChangeEvent : System.EventArgs {
            
            private boundingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public boundingRowChangeEvent(boundingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public boundingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class keywordsRowChangeEvent : System.EventArgs {
            
            private keywordsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public keywordsRowChangeEvent(keywordsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public keywordsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class themeRowChangeEvent : System.EventArgs {
            
            private themeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public themeRowChangeEvent(themeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public themeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class distinfoRowChangeEvent : System.EventArgs {
            
            private distinfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public distinfoRowChangeEvent(distinfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public distinfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class metainfoRowChangeEvent : System.EventArgs {
            
            private metainfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metainfoRowChangeEvent(metainfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metainfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class metcRowChangeEvent : System.EventArgs {
            
            private metcRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metcRowChangeEvent(metcRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metcRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class cntinfoRowChangeEvent : System.EventArgs {
            
            private cntinfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cntinfoRowChangeEvent(cntinfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cntinfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class cntorgpRowChangeEvent : System.EventArgs {
            
            private cntorgpRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cntorgpRowChangeEvent(cntorgpRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cntorgpRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class cntaddrRowChangeEvent : System.EventArgs {
            
            private cntaddrRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cntaddrRowChangeEvent(cntaddrRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cntaddrRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class metextnsRowChangeEvent : System.EventArgs {
            
            private metextnsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metextnsRowChangeEvent(metextnsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metextnsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591