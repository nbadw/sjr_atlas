#capturefor(breadcrumb_trail)
    $Url.Link('Home', "%{controller='site', action='index'}")
    <span class="breadcrumb-separator">&#8722;</span>
    $Url.Link('Search', "%{controller='search', action='index'}")
    <span class="breadcrumb-separator">&#8722;</span>
    <a href="#" title="Places">Places</a>
#end

#capturefor(stylesheets)
    <!-- EXT JS STYLESHEET -->
    <link rel="stylesheet" type="text/css" href="$Atlas.ContentPath()/stylesheets/ext-all.css" />
#end

#capturefor(headline)
    <h1 class="title">Search</h1>
    <p>You've searched for: <span class="search-query">&ldquo;$!{query}&rdquo;</span>. Please select one of the below locations to continue.</p>
#end


<div id="search-results">
    <noscript>
        #foreach($place in $results_raw)
            <div class="place-info-window" style="margin-bottom: 2em;">
                <h3>$Url.Link("$place.Name, $place.Region ($place.NameStatus)", "%{controller='place', action='view', querystring='cgndbKey=$place.cgndbKey'}")</h3>     
                <p><span>Type:</span> $place.ConciseTerm</p>
                #if($place.County)
                    <p><span>County:</span> $place.County</p> 
                #end
                <p><span>Latitude:</span> $place.Latitude</p>
                <p><span>Longitude:</span> $place.Longitude</p>
            </div>
        #end
    </noscript>
</div>


#capturefor(javascripts)
    <script src="$Atlas.ContentPath()/javascripts/ext-all-and-prototype-adapter.js" type="text/javascript" language="javascript"></script>
    <script src="http://maps.google.com/maps?file=api&amp;v=2&amp;key=ABQIAAAAGINyEenSy_3jKcSV_XX_gRSjww3UB3eYpZkCko0X0lqZG0uNnxRM6Sd5Se2-sS3bHOdDr2n6hMM-bw" type="text/javascript"></script>
    
    <script type="text/javascript" language="javascript">
    var Search = { Results: $results };

    Ext.onReady(function() {  
        $('search-results').setStyle({ height: '500px' });  
        var results = new ResultsPanel();
        var map = new MapPanel();
        
        results.on({
            'resultSelect': function(result) {
                map.selectPlace(result);
            },
            'dblclick': function(node, evt) {
                if(node.isLeaf())
                    window.location = node.attributes.url;
            }
        });        
        
        var panel = new Ext.Panel({
            layout: 'border',
            applyTo: 'search-results',
            items: [results, map]
        });
        
        results.addResults(Search.Results);   
        map.addMarkers(Search.Results); 
        map.makeAllMarkersVisible();   
    });

    ResultsPanel = function() { 
        ResultsPanel.superclass.constructor.call(this, {
            id: 'results-panel',
            region: 'west',
            title: 'Which Location Did You Mean?',
            collapsible: true,
            split: true,
            autoScroll: true,
            width: 250,
            minSize: 200,
            lines: false,
            rootVisible: false,
            root: new Ext.tree.TreeNode('Search Results'),
            collapseFirst: false
        });
        
        this.results = this.root;
        
        this.getSelectionModel().on({
            'beforeselect': function(sm, node) {
                return node.isLeaf();
            },
            'selectionchange': function(sm, node) {
                if(node) {
                    this.fireEvent('resultSelect', node.attributes);
                }
            },
            scope: this
        });
    };

    Ext.extend(ResultsPanel, Ext.tree.TreePanel, {
        addResult: function(attrs) {        
            var group_name = attrs['type'].gsub(/\s\(\d+\)$/, '');    
            var group_node = this.results.findChild('group_name', group_name);
            if(!group_node)
            {
                group_node = new Ext.tree.TreeNode({
                    text: group_name,
                    group_name: group_name,
                    cls: 'results-group-node',
                    leaf: false,
                    expanded: true
                });
                this.results.appendChild(group_node);
            }
            
            Ext.apply(attrs, {
                leaf: true,
                cls: 'result-node',
                text: attrs['name']
            });
            var node = new Ext.tree.TreeNode(attrs);        
            group_node.appendChild(node);
            return node;
        },
        
        addResults: function(results) {
            for(var i=0; i < results.length; i++) {
                this.addResult(results[i]);
            }
        }
    });

    MapPanel = function() {       
        this.map_canvas = document.createElement('div'); 
        this.map_canvas.id = 'map-canvas'; 
        this.map_canvas.style.height = '100%';
        this.map_canvas.style.width  = '100%';   
        
        this.map = new GMap2(this.map_canvas);
        this.map.setCenter(new GLatLng(37.4419, -122.1419), 13);
        this.map.addControl(new GLargeMapControl());
        
        this.markers = {};
        
        this.infoTemplate = new Ext.XTemplate(
            '<div class="place-info-window">',
                '<h3>{name}, {region} ({status_term})</h3>',       
                '<p><span>Type:</span> {type}</p>',
                '<tpl if="county">',
                   '<p><span>County:</span> {county}</p>', 
                '</tpl>',            
                '<p><span>Latitude:</span> {latitude}</p>',
                '<p><span>Longitude:</span> {longitude}</p>',
                '<a href="{url}">More Details...</a>',
            '</div>'
        ).compile();
         
        MapPanel.superclass.constructor.call(this, {
            id: 'map-panel',
            region: 'center',
            contentEl: this.map_canvas
        });
        
        this.on({
            'resize': function(container, width, height, rawWidth, rawHeight) {
                this.map.checkResize();
            },
            scope: this 
        });
        
        Event.observe(window.document.body, 'unload', function(e) { 
            GUnload() 
        });
    };

    Ext.extend(MapPanel, Ext.Panel, {
        selectPlace: function(result) {
            for(var key in this.markers) {
                var marker = this.markers[key];
                //marker.hide();
                marker.bindInfoWindowHtml(null);
            }
            var activeMarker = this.markers[result['cgndb_key']];
            var html = this.infoTemplate.apply(result);
            activeMarker.show();
            this.map.panTo(activeMarker.getLatLng());
            activeMarker.bindInfoWindowHtml(html);
            activeMarker.openInfoWindowHtml(html);
        },
        
        makeAllMarkersVisible: function() {
            if(this.markers.length == 0)
                return;
            
            var bounds = new GLatLngBounds();        
            for(var key in this.markers) {
                bounds.extend(this.markers[key].getLatLng());
            }
            this.map.setCenter(
                bounds.getCenter(), 
                this.map.getBoundsZoomLevel(bounds)
            );        
        },
        
        addMarker: function(result) { 
            var marker = new GMarker(
                new GLatLng(
                    result['latitude'],
                    result['longitude']
                )
            );
            var mapPanel = this;
            GEvent.addListener(marker, "click", function() { 
                mapPanel.selectPlace(result);
            });
            this.map.addOverlay(marker);
            this.markers[result['cgndb_key']] = marker;
        },
        
        addMarkers: function(results) {
            for(var i=0; i < results.length; i++) {
                this.addMarker(results[i]);
            }        
        }
    });
    </script>
#end