#capturefor(breadcrumb_trail)
    $Url.Link('Home', "%{controller='site', action='index'}")
    <span class="breadcrumb-separator">&#8722;</span>
    <a href="#" title="Search">Search</a>
#end

#capturefor(headline)
    <h1 class="title">Advanced Search</h1>
    <p>This is an advanced search option for querying tabular data. You will be able to download the tabular data and its associated spatial data if available.</p>
    $Url.Link('Help', "%{controller='help', action='advanced_search'}", "%{class='help'}")
    <p>Enter search criteria in the form below.</p>
#end

#capturefor(stylesheets)
    <!-- EXT JS STYLESHEET -->
    <link rel="stylesheet" type="text/css" href="$Atlas.ContentPath()/stylesheets/ext-all.css" />
#end

<div id="advanced-search-form">
    <noscript>
        <div id="requirements" style="padding: 1em 1em 0; background-color: #fff; border: 1px solid #174A83;">            
            <h2 class="title" style="color: red">Problem with minimum requirements.</h2>
            <p style="font-size: 16px">Javascript must be enabled on your web browser to use this search function.  Please enable it and try again.</p>
        </div>
    </noscript>
</div>	

#capturefor(javascripts)
    <script src="$Atlas.ContentPath()/javascripts/ext-all-and-prototype-adapter.js" type="text/javascript" language="javascript"></script>

    <!-- CONFIGURES ADVANCED SEARCH FORM -->
    <script type="text/javascript" language="javascript">
    Ext.onReady(function() {
        /* COMPONENTS */
        var datasets = new DataSetComboBox();
        var waterbodies = new WaterBodyAutoComplete();
        var watersheds = new WatershedAutoComplete();
        var aquaticSites = new AquaticSiteAutoComplete();
        var agencies = new AgencyComboBox();
        var startDate = new DateRangeField({
            fieldLabel: 'Start Date',
            name: 'startDate'
        });
        var endDate = new DateRangeField({
            fieldLabel: 'End Date',
            name: 'endDate'
        });
        
        var area_of_interest_panel = new Ext.form.FieldSet({
            collapsible: true,
            titleCollapse: true,
            collapsed: true,
            disabled: true,
            title: 'Specify an Area of Interest? (optional)',
            items: [waterbodies, watersheds, aquaticSites]
        });
        
        var agency_panel = new Ext.form.FieldSet({        
            collapsible: true,
            titleCollapse: true,
            collapsed: true,
            disabled: true,
            title: 'Specify an Agency? (optional)',
            items: [agencies]
        });  
        
        var date_range_panel = new Ext.form.FieldSet({
            collapsible: true,
            titleCollapse: true,
            collapsed: true,
            disabled: true,
            title: 'Specify a Date Range? (optional)',
            items: [startDate, endDate]         
        });
        
        /* EVENTS */
        datasets.on('select', function(combo, record, index) {
            var dataset = record.data;    
            var turn_on  = function(component) {
                component.enable();
                if(component.expand)
                    component.expand();
            };        
            var turn_off = function(component) {
                component.disable();
                if(component.collapse)
                    component.collapse();
            };
            
            dataset['IsAgencyFilterAware'] ? turn_on(agency_panel) : turn_off(agency_panel);
            dataset['IsWaterBodyFilterAware'] ? turn_on(waterbodies) : turn_off(waterbodies);
            dataset['IsWatershedFilterAware'] ? turn_on(watersheds) : turn_off(watersheds);
            dataset['IsAquaticSiteFilterAware'] ? turn_on(aquaticSites) : turn_off(aquaticSites);
            dataset['IsDateFilterAware'] ? turn_on(date_range_panel) : turn_off(date_range_panel);
            (dataset['IsWaterbodyFilterAware'] || dataset['IsWatershedFilterAware'] ||
                dataset['IsAquaticSiteFilterAware']) ? turn_on(area_of_interest_panel) : 
                turn_off(area_of_interest_panel);
                
            Ext.getCmp('btn-search').enable();
        });
            
        var setWatershedFilter = function() {   
            agencies.setFilter('drainageCode', !watersheds.disabled ? watersheds.getValue() : '');
        };
        watersheds.on({
            'change': function() { setWatershedFilter(); },
            'disable': function() { setWatershedFilter(); }       
        });
        
        var setWaterbodyFilter = function() {
            agencies.setFilter('waterbodyId', !waterbodies.disabled ? waterbodies.getValue() : '');
        };
        waterbodies.on({
            'change': function() { setWaterbodyFilter(); },
            'disable': function() { setWaterbodyFilter(); }       
        });
        
        var setAquaticSiteFilter = function() {
            agencies.setFilter('aquaticSiteId', !aquaticSites.disabled ? aquaticSites.getValue() : '');
        };
        aquaticSites.on({
            'change': function() { setAquaticSiteFilter(); },
            'disable': function() { setAquaticSiteFilter(); }       
        });
        
        agencies.on('filterchange', function(combo, filters) {
            combo.store.load({
                params: filters
            });
        });
        
    //    startDate.on('change', function(dateField, newValue, oldValue) {
    //        if(dateField.isValid())
    //            endDate.setMinValue(newValue);
    //    });
             
        /* FORM */    
        Ext.override(Ext.form.BasicForm, {    
            getValues: function(asString) {
                var values = {};
                this.items.each(function(f) {
                    var value = f.getValue();
                    if(value instanceof Date)
                        value = value.dateFormat("m/d/y");
                    values[f.getName()] = value;                     
                });
                if(asString === true) {
                    return Ext.urlEncode(values);
                }
                return values;
            }
        });
        
        var form = new Ext.FormPanel({
            frame: true,
            title: 'Search Data Sets',
            defaultType: 'textfield',
            items: [datasets, area_of_interest_panel, agency_panel, date_range_panel],
            buttons: [{
                id: 'btn-search',
                text: 'Search',
                disabled: true,
                handler: function() {
                    var params = form.getForm().getValues(true);
                    window.location.href = '$siteroot/search/advanced.castle?' + params;
                }
            }] 
        });  
        
        form.render('advanced-search-form');
    });

    DataSetComboBox = function() {
        DataSetComboBox.superclass.constructor.call(this, {
            store: new Ext.data.JsonStore({
                url: '$siteroot/dataset/list.castle',
                root: 'datasets',
                totalProperty: 'results',
                id: 'Id',
                autoLoad: true,
                baseParams: { presentationType: 'TabularPresentation' },
                fields: [
                    'Id', 'Title', 'Abstract', 'Author', 'Origin', 
                    'IsWaterBodyFilterAware', 'IsWatershedFilterAware', 'IsAgencyFilterAware', 
                    'IsAquaticSiteFilterAware', 'IsDateFilterAware'
                ]
            }),
            name: 'dataSetId',
            fieldLabel: 'Select a Data Set',
            emptyText: 'Required', 
            mode: 'local',
            triggerAction: 'all',
            forceSelection: true,
            displayField: 'Title',
            width: 500,
            tpl: new Ext.XTemplate(
                '<tpl for="."><div class="dataset-list-item">',
                    '<h3>{Title}</h3>',                   
                '</div></tpl>'
            ),
            itemSelector: 'div.dataset-list-item'
        });
    }

    Ext.extend(DataSetComboBox, Ext.form.ComboBox, {
        initList : function() {
            DataSetComboBox.superclass.initList.call(this);  
            this.view.prepareData = function(data) {
                if(data.Abstract && data.Abstract.length > 100)
                    data.Abstract = data.Abstract.substring(0, 97) + '...';
                    
                return data;
            };   
        },
        
        getValue: function() {        
            var dataset = this.findRecord(this.valueField || this.displayField, this.getRawValue());
            return dataset ? dataset['id'] : '';    
        }
    });

    WaterBodyAutoComplete = function() {
        WaterBodyAutoComplete.superclass.constructor.call(this, {
            store: new Ext.data.JsonStore({
                url: '$siteroot/waterbody/autocomplete.castle',
                root: 'waterbodies',
                totalProperty: 'results',
                id: 'Id',
                fields: [
                    "Id", "Type", "Name", "Abbreviation", "AltName", "ComplexId", 
                    "SurveyedInd", "FlowsIntoWaterBodyId", "FlowsIntoWaterBodyName"
                ]
            }),
            name: 'waterbodyId',
            fieldLabel: 'Water Body',
            displayField: 'title',
            typeAhead: false,
            loadingText: 'Searching...',
            width: 500,
            hideTrigger: true,
            minChars: 2,
            pageSize: 10,
            forceSelection: true,
            tpl: new Ext.XTemplate(
                '<tpl for="."><div class="waterbody-search-item">',
                    '<h3>{displayName}</h3>',       
                    '<p>Waterbody Id: {Id}</p>',
                    '<tpl if="AltName">',
                        '<p>Also known as: {AltName}</p>',
                    '</tpl>',
                '</div></tpl>'
            ),
            itemSelector: 'div.waterbody-search-item'
        });
    };

    Ext.extend(WaterBodyAutoComplete, Ext.form.ComboBox, {
        initList : function() {
            WaterBodyAutoComplete.superclass.initList.call(this);  
            this.view.prepareData = function(data) {
                var displayName = (data['Name'] || 'Unnamed Water Body');
                Ext.apply(data, { 
                    displayName: displayName,
                    title: displayName + ' (ID: ' + data['Id'] + ')'
                });
                return data;
            };   
        },
        
        getValue: function() {
            var waterbody = this.findRecord(this.valueField || this.displayField, this.getRawValue());
            return waterbody ? waterbody['id'] : '';
        }
    });

    WatershedAutoComplete = function() {
        WatershedAutoComplete.superclass.constructor.call(this, {
            store: new Ext.data.JsonStore({
                url: '$siteroot/watershed/autocomplete.castle',
                root: 'watersheds',
                totalProperty: 'results',
                id: 'DrainageCode',
                fields: [
                    "DrainageCode", "Name", "FlowsInto", "UnitType", "BorderInd",
                    "StreamOrder", "AreaHA", "AreaPercent", "Level1No", "Level1Name",
                    "Level2No", "Level2Name", "Level3No", "Level3Name", "Level4No", 
                    "Level4Name", "Level5No", "Level5Name", "Level6No", "Level6Name"
                ]
            }),
            name: 'drainageCode',
            fieldLabel: 'Watershed',
            displayField: 'title',
            typeAhead: false,
            loadingText: 'Searching...',
            width: 500,
            hideTrigger: true,
            minChars: 2,
            pageSize: 10,
            forceSelection: true,
            tpl: new Ext.XTemplate(
                '<tpl for="."><div class="watershed-search-item">',
                    '<h3>{Name}</h3>',
                    '<p>Drainage Code: {DrainageCode}</p>',
                '</div></tpl>'
            ),
            itemSelector: 'div.watershed-search-item'
        });
    }

    Ext.extend(WatershedAutoComplete, Ext.form.ComboBox, {
        initList: function() {
            WatershedAutoComplete.superclass.initList.call(this);  
            this.view.prepareData = function(data) {
                Ext.apply(data, { 
                    title: data['Name'] + ' (Drainage Code: ' + data['DrainageCode'] + ')'
                });
                return data;
            };   
        },
        
        getValue: function() {
            var watershed = this.findRecord(this.valueField || this.displayField, this.getRawValue());
            return watershed ? watershed['id'] : '';
        } 
    });

    AquaticSiteAutoComplete = function() {
        AquaticSiteAutoComplete.superclass.constructor.call(this, {
            store: new Ext.data.JsonStore({
                url: '$siteroot/aquaticsite/autocomplete.castle',
                root: 'aquaticSites',
                totalProperty: 'results',
                id: 'Id',
                fields: [
                    "Id", "OldAquaticSiteID", "RiverSystemID", "WaterBodyID", "WaterBodyName",
                    "AquaticSiteName", "AquaticSiteDesc", "HabitatDesc", "ReachNo", "StartDesc", 
                    "EndDesc", "StartRouteMeas", "EndRouteMeas", "SiteType", "SpecificSiteInd", 
                    "GeoReferencedInd", "IncorporatedInd", "CoordinateSource", "CoordinateSystem",
                    "XCoordinate", "YCoordinate", "CoordinateUnits", "Comments"
                ]
            }),
            name: 'aquaticSiteId',
            fieldLabel: 'Aquatic Site',
            displayField: 'title',
            typeAhead: false,
            loadingText: 'Searching...',
            width: 500,
            hideTrigger: true,
            minChars: 2,
            pageSize: 10,
            forceSelection: true,
            tpl: new Ext.XTemplate(
                '<tpl for="."><div class="aquaticsite-search-item">',
                    '<h3>{AquaticSiteName}</h3>',
                    '<p>Site ID: {Id}</p>',
                '</div></tpl>'
            ),
            itemSelector: 'div.aquaticsite-search-item'
        });
    }

    Ext.extend(AquaticSiteAutoComplete, Ext.form.ComboBox, {
        initList : function() {
            AquaticSiteAutoComplete.superclass.initList.call(this);  
            this.view.prepareData = function(data) {
                Ext.apply(data, { 
                    title: data['AquaticSiteName'] + ' (ID: ' + data['Id'] + ')'
                });
                return data;
            };   
        },
        
        getValue: function() {
            var aquaticSite = this.findRecord(this.valueField || this.displayField, this.getRawValue());
            return aquaticSite ? aquaticSite['id'] : '';
        } 
    });

    AgencyComboBox = function() {
        AgencyComboBox.superclass.constructor.call(this, {     
            fieldLabel: 'Agency',
            name: 'agency',
            width: 500,
            displayField: 'Name',
            editable: true,
            forceSelection: true,
            triggerAction: 'all',
            mode: 'local',
            emptyText: 'Select an agency...',
            store: new Ext.data.JsonStore({
                url: '$siteroot/agency/list.castle',
                root: 'agencies',
                totalProperty: 'results',
                id: 'AgencyCode',
                autoLoad: true,
                fields: ['AgencyCode', 'Name', 'Type']            
            }),
            tpl: new Ext.XTemplate(
                '<tpl for="."><div class="agency-list-item">',
                    '<h3>{Name}</h3>',
                '</div></tpl>'
            ),
            itemSelector: 'div.agency-list-item'   
        });
        
        this.filters = {
            drainageCode: '',
            waterbodyId: '',
            aquaticSiteId: ''
        };
    };

    Ext.extend(AgencyComboBox, Ext.form.ComboBox, {    
        setFilter: function(name, val) {
            var oldVal = this.filters[name];
            if(val == oldVal)
                return;
                
            this.filters[name] = val;
            return this.fireEvent('filterchange', this, this.filters);
        },
        
        getValue: function() {
            var agency = this.findRecord(this.valueField || this.displayField, this.getRawValue());
            return agency ? agency['id'] : '';
        } 
    });

    DateRangeField = function(options) {
        DateRangeField.superclass.constructor.call( 
            this, Ext.apply({ maxValue: Date() }, options) 
        ); 
    };

    Ext.extend(DateRangeField, Ext.form.DateField, {
    //    setMinValue: function(date) {
    //        this.minValue = date;
    //        Ext.apply(this.menu.picker, { minDate: this.minValue });
    //    },
    //    
    //    setMaxValue: function(date) {
    //        this.maxValue = date;
    //        Ext.apply(this.menu.picker, { maxValue: this.minValue });    
    //    },
    //    
    //    getValue: function() {
    //        return this.formatDate(
    //            Ext.form.DateField.superclass.getValue.call(this)
    //        );
    //    }
    });
    </script>
#end